;; a short example how to use the new Drag'n'Drop API in
;; combination with extents.
;;

(defun dnd-drop-message (event object text)
  (message "Dropped %s with :%s" text object)
  t)

(defun do-nothing (event object)
  nil)

(defun start-drag (event what &optional typ)
  (cond ((featurep 'offix)
	 (if (numberp typ)
	     (offix-start-drag event what typ)
	   (offix-start-drag event what)))
	((featurep 'cde)
	 (funcall (intern "cde-start-drag-internal") what))
	(t display-message 'error "no valid drag protocols implemented")))

(defun make-drop-targets ()
  (let ((buf (get-buffer-create "*DND misc-user extent test buffer*"))
	(s nil)
	(e nil))
    (set-buffer buf)
    (pop-to-buffer buf)
    (setq s (point))
    (insert "[ DROP TARGET 1]")
    (setq e (point))
    (setq ext (make-extent s e))
    (set-extent-property ext
			 'dragdrop-drop-functions
			 '((do-nothing t t)
			   (dnd-drop-message t t "on target 1")))
    (set-extent-property ext 'mouse-face 'highlight)
    (insert "    ")
    (setq s (point))
    (insert "[ DROP TARGET 2]")
    (setq e (point))
    (setq ext (make-extent s e))
    (set-extent-property ext
			 'dragdrop-drop-functions
			 '((dnd-drop-message t t "on target 2")))
    (set-extent-property ext 'mouse-face 'highlight)
    (insert "    ")
    (setq s (point))
    (insert "[ DROP TARGET 3]")
    (setq e (point))
    (setq ext (make-extent s e))
    (set-extent-property ext
			 'dragdrop-drop-functions
			 '((dnd-drop-message t t "on target 3")))
    (set-extent-property ext 'mouse-face 'highlight)
    (newline 2)))

(defun make-drag-starters ()
  (let ((buf (get-buffer-create "*DND misc-user extent test buffer*"))
	(s nil)
	(e nil)
	(ext nil)
	(kmap nil))
    (set-buffer buf)
    (pop-to-buffer buf)
    (erase-buffer buf)
    (insert "Try to drag data from one of the upper extents to one\nof the lower extents. Make sure that your minibuffer is big\ncause it is used to display the data.\n\nYou may also try to select some of this text and drag it with button2.")
    (newline 2)
    (setq s (point))
    (insert "[ TEXT DRAG TEST ]")
    (setq e (point))
    (setq ext (make-extent s e))
    (set-extent-property ext 'mouse-face 'isearch)
    (setq kmap (make-keymap))
    (define-key kmap [button1] 'text-drag)
    (set-extent-property ext 'keymap kmap)
    (insert "    ")
    (setq s (point))
    (insert "[ FILE DRAG TEST ]")
    (setq e (point))
    (setq ext (make-extent s e))
    (set-extent-property ext 'mouse-face 'isearch)
    (setq kmap (make-keymap))
    (define-key kmap [button1] 'file-drag)
    (set-extent-property ext 'keymap kmap)
    (insert "    ")
    (setq s (point))
    (insert "[ FILES DRAG TEST ]")
    (setq e (point))
    (setq ext (make-extent s e))
    (set-extent-property ext 'mouse-face 'isearch)
    (setq kmap (make-keymap))
    (define-key kmap [button1] 'files-drag)
    (set-extent-property ext 'keymap kmap)
    (insert "    ")
    (setq s (point))
    (insert "[ URL DRAG TEST ]")
    (setq e (point))
    (setq ext (make-extent s e))
    (set-extent-property ext 'mouse-face 'isearch)
    (setq kmap (make-keymap))
    (define-key kmap [button1] 'url-drag)
    (set-extent-property ext 'keymap kmap)
    (newline 3)))
    
(defun text-drag (event)
  (interactive "@e")
  (start-drag event "That's a test"))

(defun file-drag (event)
  (interactive "@e")
  (start-drag event "/tmp/printcap" 2))

(defun url-drag (event)
  (interactive "@e")
  (start-drag event "http://www.xemacs.org/" 8))

(defun files-drag (event)
  (interactive "@e")
  (start-drag event '("/tmp/dragtest" "/tmp/droptest" "/tmp/printcap") 3))

(setq dragdrop-drop-functions '((do-nothing t t)
				(dnd-drop-message 2 t "region somewhere else")
				(dnd-drop-message 1 t "drag-source somewhere else")
				(do-nothing t t)))
(make-drag-starters)
(make-drop-targets)
