# -*- mode: makefile -*-

############################################################################

INSTALL_DIR=c:\Program Files\XEmacs\XEmacs-$(XEMACS_VERSION_STRING)

PACKAGE_PREFIX=c:\Program Files\XEmacs

############################################################################

# Multilingual support.
MULE=0

# Native MS Windows support.
HAVE_MS_WINDOWS=1

# X Windows support.  Not working at all and probably never will.  If you
# want X support under MS Windows, compile with Cygwin instead.
HAVE_X_WINDOWS=0
X11_DIR=

# GTK support. Do NOT set this to 1; as of xemacs-21.5-b6
# gtk-xemacs is not supported on MSWindows (mingw or msvc).
# Yes, we know that gtk has been ported to native MSWindows
# but XEmacs is not yet ready to use that port.
HAVE_GTK=0
GTK_DIR=

############################################################################

# Set this to enable XPM support (virtually mandatory), and specify
# the directory containing xpm.
HAVE_XPM=1
XPM_DIR=c:\src\xpm-3.4k

# Set this to enable GIF support.
HAVE_GIF=1

# Set this to enable PNG support (virtually mandatory), and specify
# the directories containing png and zlib.
HAVE_PNG=1
PNG_DIR=c:\src\libpng-1.0.9
ZLIB_DIR=c:\src\zlib

# Set this to enable TIFF support, and specify the directory containing tiff.
HAVE_TIFF=0
TIFF_DIR=

# Set this to enable JPEG support, and specify the directory containing jpeg.
HAVE_JPEG=1
JPEG_DIR=c:\src\jpeg-6b

# Set this to enable XFace support, and specify the directory containing
# compface.
HAVE_XFACE=0
COMPFACE_DIR=

############################################################################

# Set this to specify the location of makeinfo. (If not set, XEmacs will
# attempt to use its built-in texinfo support when building info files.)
MAKEINFO=c:\src\texinfo-4.0\makeinfo\makeinfo.exe

############################################################################

# Set this to turn on optimization when compiling.
OPTIMIZED_BUILD=0

# Set this to build with the fastcall calling convention, which uses registers
# instead of the stack and should speed things up a bit
# #### Change to 1 when I check in the ws with support for fastcall
USE_FASTCALL=0

# Set this to compile in support for profiling.  If you want line-by-line
# profiling under VC++, you also need debugging turned on.
PROFILE_SUPPORT=0

############################################################################
#                          Development options                             #
############################################################################

# Set this to enable debug code in XEmacs that doesn't slow things down,
# and to add debugging information to the executable. (The code that's
# enabled in XEmacs is primarily extra commands that aid in debugging
# problems.  The kind of debugging code that slows things down --
# i.e. internal error-checking -- is controlled by the ERROR_CHECK_ALL
# variable, below.)
DEBUG_XEMACS=1

# True if running VC++ 6 or later.
HAVE_VC6=1

# Uncomment this to turn off or on the error-checking code, which adds
# abundant internal error checking (and slows things down a lot).  Normally,
# leave this alone -- it will be on for beta builds and off for release
# builds.
# ERROR_CHECK_ALL=0

# Set this to speed up building, for development purposes.
QUICK_BUILD=0

# Set this to see exactly which compilation commands are being run (not
# generally recommended).
VERBOSECC=0

# Set this to get nmake to use dependency info (recommended for development).
# Requires cygwin or ActiveState versions of Perl to be installed.
DEPEND=0

# Set this to use the portable dumper for dumping the preloaded Lisp
# routines, instead of the older "unexec" routines in unexnt.c.
USE_PORTABLE_DUMPER=1

# Set this to get improved type checking of Lisp_Objects -- with this
# setting, they're declared as unions instead of ints, and so places where
# a Lisp_Object is mistakenly passed to a routine expecting an int (or
# vice-versa), or a check is written `if (foo)' instead of `if (!NILP
# (foo))', will be flagged as errors. (All of these do NOT lead to the
# expected results!  Qnil is not represented as 0 (so if (foo) will
# *ALWAYS* be true for a Lisp_Object), the representation of an integer as
# a Lisp_Object is not just the integer's numeric value (but usually 2x the
# integer +/- 1).

# Some also claim it simplifies debugging, but I don't really believe them.
# Definitely don't do your normal builds this way, because you may well get
# less efficiency, and could conceivably trigger compiler bugs (has definitely happened, many times, with gcc).
# USE_UNION_TYPE=1
