/* Makefile for src subdirectory in XEmacs.
   Copyright (C) 1985, 1987, 1988, 1993, 1994 Free Software Foundation, Inc.
   Copyright (C) 1994, 1995 Board of Trustees, University of Illinois

This file is part of XEmacs.

XEmacs is free software; you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the
Free Software Foundation; either version 2, or (at your option) any
later version.

XEmacs is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License
along with XEmacs; see the file COPYING.  If not, write to
the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
Boston, MA 02111-1307, USA.  */

/* Synched up with: Not synched with FSF. */

@SET_MAKE@

/* Some people use these in paths they define.  We do not want their paths
   getting changed on them. */
#undef sparc
#undef sun
#undef unix
#undef sgi
#undef NeXT
#undef i386

#ifdef USE_GNU_MAKE
/* For performance and consistency, no built-in rules */
.SUFFIXES:
#endif
.SUFFIXES: .c .o .i .h
dot = .
/* On Xenix and the IBM RS6000, double-dot gets screwed up.  */
lispdir = ${srcdir}/$(dot)$(dot)/lisp/
libsrc = $(dot)$(dot)/lib-src/
etcdir = $(dot)$(dot)/etc/
/* This allows you to put the Mule files in a separate location.
   Change this if you so desire. */
muledirfromsrc = $(dot)
MULESRCDIR = ${srcdir}/${muledirfromsrc}

/* Here are the things that we expect ../configure to edit. */
srcdir=@srcdir@
CC=@CC@
CPP=@CPP@
CFLAGS=@CFLAGS@
C_SWITCH_SYSTEM=@c_switch_system@
LN_S=@LN_S@
native_sound_lib=@native_sound_lib@

/* just to be sure the sh is used */
SHELL=/bin/sh

#define NO_SHORTNAMES
#define NOT_C_CODE
#include "config.h"

/* With the traditional VPATH setting, it is not possible to
   simultaneously compile in-place and in another directory.  The
   mistaken definition is that *all* dependencies are searched for in
   the VPATH directory, rather than just the dependencies that are not
   themselves targets.  Thus, if there is an up-to-date .o file in the
   in-place location, it will not get recompiled in the not-in-place
   location.

   The GNU Make "vpath" directive continues this tradition, but at
   least lets you restrict the classes of files that it applies to.
   This allows us to kludge around the problem. */
#ifdef USE_GNU_MAKE
vpath %.c @srcdir@
vpath %.h @srcdir@
/* now list files that should NOT be searched in the srcdir.
   This includes any .c or .h built from something else
   (e.g. a .in file). */
vpath config.h
vpath paths.h
vpath Emacs.ad.h
vpath puresize_adjust.h
#else
VPATH=@srcdir@
#endif

#ifdef USE_LCC
/* Why is this here?
# undef LIB_STANDARD
# define LIB_STANDARD
*/
# define LCCFLAGS -Xa -wucp -XW'[Oo]ld style func dcl' $(ENERGIZEP)
#ifdef NEW_LCC
# define LCCLINK -Xdbx
#else
# define LCCLINK
#endif
# define ORDINARY_LINK
#else
# define LCCFLAGS
# define LCCLINK
#endif

/* On some machines #define register is done in config;
   do not let it interfere with this file.  */
#undef register

/* On some systems we may not be able to use the system make command. */
#ifdef MAKE_COMMAND
MAKE = MAKE_COMMAND
#endif

#ifdef C_COMPILER
CC = C_COMPILER
#endif

/* Some machines do not have the standard C libraries in the usual place. */
#ifndef ORDINARY_LINK
#ifndef LIB_STANDARD
#define LIB_STANDARD -lc
#endif
#else
#ifndef LIB_STANDARD
#define LIB_STANDARD
#endif
#endif

/* Unless inhibited or changed, use -lg to link for debugging.  */
#ifndef LIBS_DEBUG
#define LIBS_DEBUG -lg
#endif

/* Some s/*.h files define this to request special libraries.  */
#ifndef LIBS_SYSTEM
#define LIBS_SYSTEM
#endif

/* Some m/*.h files define this to request special libraries.  */
#ifndef LIBS_MACHINE
#define LIBS_MACHINE
#endif

#ifndef LIB_MATH
# ifdef LISP_FLOAT_TYPE
#  define LIB_MATH -lm
# else /* ! defined (LISP_FLOAT_TYPE) */
#  define LIB_MATH
# endif /* ! defined (LISP_FLOAT_TYPE) */
#endif /* LIB_MATH */

/* Some s/*.h files define this to request special switches in ld.  */
#ifndef LD_SWITCH_SYSTEM
#if !defined (__GNUC__) && (defined(COFF_ENCAPSULATE) || (defined (BSD) && !defined (COFF)))
#define LD_SWITCH_SYSTEM -X
#else /* ! defined(COFF_ENCAPSULATE) || (defined (BSD) && !defined (COFF)) */
#define LD_SWITCH_SYSTEM
#endif /* ! defined(COFF_ENCAPSULATE) || (defined (BSD) && !defined (COFF)) */
#endif /* LD_SWITCH_SYSTEM */

#ifndef LD_SWITCH_CALL_SHARED
#define LD_SWITCH_CALL_SHARED
#endif /* define a call_shared switch */

#ifndef LD_SWITCH_SHARED
#define LD_SWITCH_SHARED -c
#endif /* define a shared switch */

/* Some m/*.h files define this to request special switches in ld.  */
#ifndef LD_SWITCH_MACHINE
#define LD_SWITCH_MACHINE
#endif

/* Some m/*.h files define this to request special switches in cc.  */
#ifndef C_SWITCH_MACHINE
#define C_SWITCH_MACHINE
#endif

/* Some s/*.h files define this to request special switches in cc.  */
#ifndef C_SWITCH_SYSTEM
#define C_SWITCH_SYSTEM
#endif

/* These macros are for switches specifically related to X Windows.  */
#ifndef C_SWITCH_X_MACHINE
#define C_SWITCH_X_MACHINE
#endif

#ifndef C_SWITCH_X_SYSTEM
#define C_SWITCH_X_SYSTEM
#endif

#ifndef C_SWITCH_X_SITE
#define C_SWITCH_X_SITE
#endif

#ifndef LD_SWITCH_X_SYSTEM
#define LD_SWITCH_X_SYSTEM
#endif

#ifndef LD_SWITCH_X_SITE
#define LD_SWITCH_X_SITE
#endif

/* These can be passed in from config.h to define special load and
   compile switches needed by individual sites */
#ifndef LD_SWITCH_SITE
#define LD_SWITCH_SITE
#endif

#ifndef C_SWITCH_SITE
#define C_SWITCH_SITE
#endif

#ifndef ORDINARY_LINK

#ifndef CRT0_COMPILE
#define CRT0_COMPILE $(CC) -c $(ALL_CFLAGS) C_SWITCH_ASM 
#endif

#ifndef START_FILES
#ifdef NO_REMAP
#ifdef COFF_ENCAPSULATE
#define START_FILES pre-crt0.o /usr/local/lib/gcc-crt0.o
#else /* ! defined (COFF_ENCAPSULATE) */
#define START_FILES pre-crt0.o /lib/crt0.o
#endif /* ! defined (COFF_ENCAPSULATE) */
#else /* ! defined (NO_REMAP) */
#define START_FILES ecrt0.o
#endif /* ! defined (NO_REMAP) */
#endif /* START_FILES */
STARTFILES = START_FILES

#else /* ORDINARY_LINK */

/* config.h might want to force START_FILES anyway */
#ifdef START_FILES
STARTFILES = START_FILES
#else
STARTFILES =
#endif /* START_FILES */

#endif /* not ORDINARY_LINK */

/* Unless inhibited or changed, use -g to compile for debugging. */
#ifndef C_DEBUG_SWITCH
#define C_DEBUG_SWITCH -g
#endif

/* If user wants to optimize, this is how.  */
#ifndef C_OPTIMIZE_SWITCH
#define C_OPTIMIZE_SWITCH -O
#endif

/* cc switches needed to make the "asm" keyword work.
   Nothing special needed on most machines.  */
#ifndef C_SWITCH_ASM
#define C_SWITCH_ASM
#endif

ILD=/cadillac1/code/bin.sun4/ild

PURIFY_PROG=purify
PURIFY_FLAGS=-chain-length=16 -ignore-signals=SIGPOLL -log-file=puremacs.log \
             -messages=batch -show-directory=yes -windows=yes \
             -cache-dir=. -always-use-cache-dir=yes
QUANTIFY_PROG=quantify
QUANTIFY_FLAGS=-windows=no -record-data=no
PURECOV_PROG=purecov
#ifdef  QUANTIFY
#define QUANTIFY_INCLUDES -I/local/include
#define QUANTIFY_LIBS /local/lib/quantify_stubs.a
#else
#define QUANTIFY_INCLUDES
#define QUANTIFY_LIBS
#endif

/* Figure out whether the system cpp can handle long names.
   Do it by testing it right now.
   If it loses, arrange to use the GNU cpp.  */

#define LONGNAMEBBBFOOX
#ifdef LONGNAMEBBBARFOOX
/* Installed cpp fails to distinguish those names!  */
/* Arrange to compile the GNU cpp later on */
#define NEED_CPP
/* Cause cc to invoke the cpp that comes with Emacs,
   which will be in a file named localcpp.  */
MYCPPFLAG= -Blocal
/* LOCALCPP is the local one or nothing.
   CPP is the local one or the standardone.  */
LOCALCPP= localcpp
#else
MYCPPFLAGS=
LOCALCPP=
#endif /* ! defined (LONGNAMEBBBARFOOX) */

#ifdef SHORTNAMES
SHORT= shortnames
#else
SHORT=
#endif

#ifdef HAVE_NATIVE_SOUND
# if defined (SOLARIS2)
#   define SOUND_CFLAGS		C_SWITCH_SITE -I/usr/demo/SOUND/include
#   define SOUND_OBJS		sunplay.o
# elif defined (SPARC)
#   define SOUND_CFLAGS	C_SWITCH_SITE -I/usr/demo/SOUND
#   define SOUND_OBJS		sunplay.o
# elif defined (IRIX4) || defined (IRIX5) || defined (IRIX6)
#   define SOUND_CFLAGS
#   define SOUND_OBJS		sgiplay.o
# elif defined (hp9000s800)
#   ifdef USE_GCC
#     define SOUND_CFLAGS	-Dconst= -Dvolatile= -I/usr/audio/examples
#   else /* ! USE_GCC */
#     define SOUND_CFLAGS	+e -I/usr/audio/examples 
#   endif /* USE_GCC */
#   define SOUND_OBJS		hpplay.o
# elif defined (LINUX) || defined(__FreeBSD__) || defined (__bsdi__)
#   define SOUND_CFLAGS
#   define SOUND_OBJS		linuxplay.o
# else
  ERROR!!  HAVE\_NATIVE\_SOUND can only be defined on Solaris, SunOS, SGI, hp9000s800, or FreeBSD, BSD/I, Linux
# endif /* OS */
#else /* !HAVE_NATIVE_SOUND */
# define SOUND_CFLAGS
# define SOUND_OBJS
#endif /* ! HAVE_NATIVE_SOUND */

#ifdef HAVE_NAS_SOUND
# define NAS_CFLAGS C_SWITCH_SITE 
# define NAS_LIBS -laudio
# define NAS_OBJS nas.o
#else
# define NAS_CFLAGS
# define NAS_LIBS
# define NAS_OBJS
#endif /* HAVE_NAS_SOUND */

#ifdef ENERGIZE
CONN_DIR=../connection
# define ENERGIZE_INCLUDES -I${I_DIR_PREFIX}${CONN_DIR}
# define ENERGIZE_LDFLAGS -L${CONN_DIR}
# if defined(ENERGIZE_3)
#  define ENERGIZE_LIBS -lenergize
# elif defined (ENERGIZE_2)
#  define ENERGIZE_LIBS -lconn
# else
#  define ENERGIZE_LIBS -lconn
# endif
#else /* !ENERGIZE */
# define ENERGIZE_INCLUDES
# define ENERGIZE_LDFLAGS
# define ENERGIZE_LIBS
#endif /* !ENERGIZE */

#ifdef HAVE_SOCKS
# define SOCKS_LIBS -lsocks
#else /* !HAVE_SOCKS */
# define SOCKS_LIBS
#endif /* !HAVE_SOCKS */

#ifdef HAVE_GIF
# define GIF_OBJS dgif_lib.o gif_err.o gifalloc.o
#else
# define GIF_OBJS
#endif

#ifdef HAVE_PNG
# ifdef HAVE_PNG_GNUZ
PNG_LIBS = -lpng -lgz
# else
PNG_LIBS = -lpng -lz
# endif
#endif /* HAVE_PNG */

#if defined (HAVE_LIBKSTAT) && defined (HAVE_KSTAT_H)
LIB_KSTAT = -lkstat
#endif /* KSTAT */

#ifdef HAVE_DATABASE

# define DATABASE_OBJS database.o

# if !defined (DATABASE_DBM_LIBS)
#  if defined (HAVE_GNU_DBM) && defined (HAVE_LIBGDBM)
#   define DATABASE_DBM_LIBS -lgdbm
#  elif defined (HAVE_DBM) && defined (HAVE_LIBDBM)
#   define DATABASE_DBM_LIBS -ldbm
#  else
#   define DATABASE_DBM_LIBS
#  endif
# endif

# if !defined (DATABASE_DB_LIBS)
#  if defined (HAVE_BERKELEY_DB) && defined (HAVE_LIBDB)
#   define DATABASE_DB_LIBS -ldb
#  else
#   define DATABASE_DB_LIBS
#  endif
# endif

# define DATABASE_LIBS DATABASE_DBM_LIBS DATABASE_DB_LIBS

#else /* not HAVE_DATABASE */

# define DATABASE_OBJS
# define DATABASE_LIBS

#endif /* not HAVE_DATABASE */

#ifdef HAVE_JPEG
JPEG_LIBS = -ljpeg
#endif

#define NO_GNU_LINKER

#ifdef DYNODUMP
#ifdef __GNUC__
#undef NO_GNU_LINKER
#define NO_GNU_LINKER -fno-gnu-linker
#endif
DYNODUMPBUILDDIR = $(dot)$(dot)/dynodump
#define DYNODUMP_DEPS $(DYNODUMPBUILDDIR)/dynodump.so
#else
#define DYNODUMP_DEPS
#endif

#ifdef MULE
#define MULE_INC -I${MULESRCDIR}
#else
#define MULE_INC
#endif

/* If you want to debug, you can add C_DEBUG_SWITCH to this list.
   If you want to optimize, you can add C_OPTIMIZE_SWITCH to the list.  */

/* -Demacs is needed to make some files produce the correct version
   for use in Emacs.

   -DHAVE_CONFIG_H is needed for some other files to take advantage of
   the information in "config.h".  */

/* C_SWITCH_X_SITE must come before C_SWITCH_X_MACHINE and C_SWITCH_X_SYSTEM
   since it may have -I options that should override those two.  */

CPPFLAGS=-Demacs -DHAVE_CONFIG_H $(MYCPPFLAG) -I. \
	   -I${srcdir} MULE_INC LCCFLAGS C_SWITCH_MACHINE C_SWITCH_SYSTEM \
	   C_SWITCH_SITE C_SWITCH_X_SITE C_SWITCH_X_MACHINE \
	   C_SWITCH_X_SYSTEM $(LIBX11_INCLUDES) QUANTIFY_INCLUDES 
ALL_CFLAGS=$(CPPFLAGS) ${CFLAGS}

#ifdef NEED_XILDOFF
#define XILDOFF -xildoff
#else
#define XILDOFF
#endif

LDFLAGS = LD_SWITCH_SITE LD_SWITCH_X_SITE LD_SWITCH_SYSTEM \
	  LD_SWITCH_X_SYSTEM LD_SWITCH_MACHINE \
	  -L. $(LIBX11_LDFLAGS) ENERGIZE_LDFLAGS XILDOFF NO_GNU_LINKER

.c.o:
	$(CC) -c $(ALL_CFLAGS) $<

/* Create preprocessor output (debugging purposes only) */
.c.i:
	$(CC) -P $(CPPFLAGS) $<


#ifndef LIBX11_MACHINE
#define LIBX11_MACHINE
#endif

#ifndef LIBX11_SYSTEM
#define LIBX11_SYSTEM
#endif

LWLIBSRCDIR = ${srcdir}/$(dot)$(dot)/lwlib

#ifdef HAVE_X_WINDOWS

#ifdef HAVE_TOOLBARS
#define TOOLBAR_X_OBJS toolbar-x.o
#else
#define TOOLBAR_X_OBJS
#endif

#ifdef HAVE_MENUBARS
#define MENUBAR_X_OBJS menubar-x.o
#else
#define MENUBAR_X_OBJS
#endif

#ifdef HAVE_SCROLLBARS
#define SCROLLBAR_X_OBJS scrollbar-x.o
#else
#define SCROLLBAR_X_OBJS
#endif

#ifdef HAVE_DIALOGS
#define DIALOG_X_OBJS dialog-x.o
#else
#define DIALOG_X_OBJS
#endif

#if defined (HAVE_MENUBARS) || defined (HAVE_SCROLLBARS) || defined (HAVE_DIALOGS) || defined (HAVE_TOOLBARS)
#define GUI_X_OBJS gui-x.o
#else
#define GUI_X_OBJS
#endif

#ifndef HAVE_XIM
#define INPUT_METHOD_X_OBJS
#elif defined(XIM_MOTIF)
#define INPUT_METHOD_X_OBJS input-method-motif.o
#else
#define INPUT_METHOD_X_OBJS input-method-xlib.o
#endif

#define XOBJS console-x.o device-x.o DIALOG_X_OBJS event-Xt.o frame-x.o \
	      glyphs-x.o GUI_X_OBJS MENUBAR_X_OBJS objects-x.o redisplay-x.o \
              SCROLLBAR_X_OBJS TOOLBAR_X_OBJS INPUT_METHOD_X_OBJS xgccache.o \
	      xselect.o

#ifdef HAVE_XMU
#define XMU_OBJS
XMU_LIB = -lXmu
#else
#define XMU_OBJS xmu.o
#endif

/* LWLIBSRCDIR is defined above regardless of X being used or not.
   This avoids having to conditionalize the dependencies on lwlib.h */
LWLIBBUILDDIR = $(dot)$(dot)/lwlib

LIBX11_LDFLAGS = -L$(LWLIBBUILDDIR)
LIBX11_INCLUDES = -I$(LWLIBSRCDIR)

#ifdef HAVE_XPM
/* Force the Xpm library to be statically linked, always, if at Sun. */
# ifdef USAGE_TRACKING
    XPM_LIBS = -Bstatic -lXpm -Bdynamic
# else
    XPM_LIBS = -lXpm
# endif /* at Sun */
#endif /* HAVE_XPM */

#ifdef HAVE_XFACE
XFACE_LIBS = -lcompface
#endif /* HAVE_XFACE */

#ifdef USAGE_TRACKING
/* Force the ut library to be statically linked, always. */
# if defined (SOLARIS2) || defined (SUNOS4)
    USAGE_TRACKING_LIBS = -Bstatic -lut -Bdynamic
# else
    USAGE_TRACKING_LIBS = -lut
# endif /* SOLARIS2 || SUNOS4 */
#else
USAGE_TRACKING_LIBS =
#endif /* USAGE_TRACKING */


#ifdef LWLIB_USES_MOTIF
TOOLKIT_LIBS = -lXm
#ifdef LWLIB_USES_ATHENA
TOOLKIT_LIBS = -lXm -lXaw
#endif /* LWLIB_USES_ATHENA */
#else /* ! LWLIB_USES_MOTIF */
TOOLKIT_LIBS = -lXaw
#endif /* ! LWLIB_USES_MOTIF */

LIBX11_LIBS = -llw $(TOOLKIT_LIBS) $(XPM_LIBS) $(XFACE_LIBS) $(JPEG_LIBS) $(PNG_LIBS) $(USAGE_TRACKING_LIBS) 

#ifdef AIX4
# define LIBI18N -li18n
#else
# define LIBI18N
#endif /* AIX4 */

#if (defined(LINUX) && defined(HAVE_CDE))
# define LIBX11_INTL -lXintl
#else
# define LIBX11_INTL
#endif

#ifdef THIS_IS_X11R6
#ifdef NEED_LIBW
LIBW= -lw
#else
LIBW=
#endif
LIBX=  $(LIBX11_LIBS) $(XMU_LIB) -lXt -lSM -lICE $(LIBW) -lXext LIBX11_INTL -lX11 LIBX11_MACHINE LIBX11_SYSTEM LIBI18N
#else
LIBX=  $(LIBX11_LIBS) $(XMU_LIB) -lXt -lXext LIBX11_INTL -lX11 LIBX11_MACHINE LIBX11_SYSTEM LIBI18N
#endif

#else
# define XOBJS
# define XMU_OBJS

#endif /* HAVE_X_WINDOWS */

/* We should be able to deal with Canna and Wnn in tty mode once MULE is */
/* ported to tty, right? */
#ifdef MULE

/* We ignore mule-mcpath.o for the moment. */

# ifdef HAVE_CANNA
#  define CANNA_OBJS mule-canna.o
#  define CANNA_OBJ_SRC ${muledirfromsrc}/mule-canna.c
#  define LIB_CANNA -lcanna -lRKC
# else
#  define CANNA_OBJS
#  define CANNA_OBJ_SRC
#  define LIB_CANNA
# endif
# ifdef HAVE_WNN
#  define WNN_OBJS mule-wnnfns.o
#  define WNN_OBJ_SRC ${muledirfromsrc}/mule-wnnfns.c
#  define LIB_WNN -lwnn
# else
#  define WNN_OBJS
#  define WNN_OBJ_SRC
#  define LIB_WNN
# endif
/* Chuck says that you have to have at least one specified actual
   object file per line. */
mule_objs=	mule.o mule-ccl.o CANNA_OBJS \
		WNN_OBJS mule-charset.o mule-coding.o
mule_obj_src=	${muledirfromsrc}/mule.c \
		${muledirfromsrc}/mule-ccl.c CANNA_OBJ_SRC \
		WNN_OBJ_SRC ${muledirfromsrc}/mule-charset.c \
		${muledirfromsrc}/mule-coding.c

#else /* not MULE */

mule_objs=
mule_obj_src=
#define LIB_CANNA
#define LIB_WNN

#endif /* not MULE */

#ifndef ORDINARY_LINK
/* Fix linking if compiled with GCC.  */
#ifdef __GNUC__

#if __GNUC__ > 1

/* Versions of GCC >= 2.0 put their library, libgcc.a, in obscure
   places that are difficult to figure out at make time.  Fortunately,
   these same versions allow you to pass arbitrary flags on to the
   linker, so there is no reason not to use it as a linker.

   Well, it is not quite perfect.  The "-nostdlib" option keeps GCC
   from searching for libraries in its internal directories, so we
   have to ask GCC explicitly where to find libgcc.a.  */

#ifndef LINKER
#define LINKER $(CC) -nostdlib
/* GCC passes any argument prefixed with -Xlinker directly to the
   linker.  See prefix-args.c for an explanation of why we do not do
   this with the shell "for" construct.
   Note that some people do not have "."  in their paths, so we must
   use ./prefix-args.  */
#define YMF_PASS_LDFLAGS(flags) `./prefix-args -Xlinker flags`
#endif /* LINKER */

#ifndef LIB_GCC
/* Ask GCC where to find libgcc.a.  */
#define LIB_GCC `$(CC) -print-libgcc-file-name`
#endif /* LIB_GCC */

GNULIB_VAR = LIB_GCC

#else /* __GNUC__ < 2 */

#ifndef LIB_GCC
#define LIB_GCC /usr/local/lib/gcc-gnulib
#endif /* LIB_GCC */
GNULIB_VAR = `if [ -f LIB_GCC ] ; then echo LIB_GCC; else echo; fi`
#endif /* __GNUC__ < 2 */
#else /* ! defined (__GNUC__) */
GNULIB_VAR = 

#endif /* ! defined (__GNUC__) */
#else
GNULIB_VAR =
#endif /* not ORDINARY_LINK */

/* Specify address for ld to start loading at,
   if requested by configuration.  */
#ifdef LD_TEXT_START_ADDR
STARTFLAGS = -T LD_TEXT_START_ADDR -e __start
#else
STARTFLAGS =
#endif

#ifdef ORDINARY_LINK
LD = $(CC) $(CFLAGS)
#else
#ifdef COFF_ENCAPSULATE
LD=$(CC) -nostdlib
#else /* not ORDINARY_LINK */
#ifdef LINKER
LD=LINKER
#else /* ! defined (LINKER) */
LD=ld
#endif /* ! defined (LINKER) */
#endif /* ! defined (COFF_ENCAPSULATE) */
#endif /* not ORDINARY_LINK */

/* A macro which other sections of the makefile can redefine to munge the
   flags before they are passed to LD.  This is helpful if you have
   redefined LD to something odd, like "gcc".  */
#ifndef YMF_PASS_LDFLAGS
#define YMF_PASS_LDFLAGS(flags) flags
#endif

/* Allow config.h to specify a replacement file for unexec.c.  */
#ifndef UNEXEC
#define UNEXEC unexec.o
#endif
#ifndef UNEXEC_SRC
#define UNEXEC_SRC unexec.c
#endif

#ifdef ENERGIZE
# ifdef EMACS_BTL
   BTLDIR=$(srcdir)/../btl
#  define BTLOBJS cadillac-btl.o cadillac-btl-process.o cadillac-btl-asm.o \
		  cadillac-btl-emacs.o
# else
#  define BTLOBJS
# endif /* BTL */
# if defined(FREE_CHECKING) || defined(DEBUG_INPUT_BLOCKING) || defined(DEBUG_GCPRO)
#  define FREECHECKOBJS free-hook.o
# else  /* !FREE */
#  define FREECHECKOBJS
# endif /* !FREE */
# define ENERGIZE_OBJS energize.o FREECHECKOBJS
#else /* !ENERGIZE */
# define ENERGIZE_OBJS
# define BTLOBJS
#endif /* !ENERGIZE */

#ifdef HAVE_REALPATH
#define REALPATH_OBJS
#else
#define REALPATH_OBJS realpath.o
#endif

#ifdef TOOLTALK
# define TOOLTALK_OBJS tooltalk.o
# if (defined (IRIX5) || defined (HPUX) || defined (POWERPC) || defined (AIX4) || defined (LINUX))
#  define LIB_TOOLTALK -ltt
# else
#  if (defined (SPARC) && !defined (USG))
#    define LIB_TOOLTALK -ltt -lI18N
#  else
#    if ((defined (SPARC) || defined(INTEL386)) && defined (USG))
#      define LIB_TOOLTALK -ltt -lce
#    endif /* ((SPARC || INTEL386) && USG) */
#  endif /* ! (SPARC && !USG) */
# endif /* !IRIX5 */
#else /* !TOOLTALK */
# define TOOLTALK_OBJS
# define LIB_TOOLTALK
#endif /* !TOOLTALK */

#ifdef HAVE_CDE
#  define LIB_CDE -lDtSvc -ltt
#else
#  define LIB_CDE
#endif

#ifdef HAVE_OFFIX_DND
#  define LIB_OFFIX_DND -lDnd
#else
#  define LIB_OFFIX_DND
#endif

#if (defined(LIB_INTL) && (!(defined(I18N3) || defined(I18N4))))
  /* this should be defined by s- files, but we should not use it unless
     I18N3 or I18N4 are defined. */
# undef LIB_INTL
#endif

#ifndef LIB_INTL
# define LIB_INTL
#endif

#ifdef MOCKLISP_SUPPORT
# define MOCKLISPOBJS mocklisp.o
#else
# define MOCKLISPOBJS
#endif

#ifdef DEBUG_XEMACS
# define DEBUG_OBJS debug.o
#else
# define DEBUG_OBJS
#endif

#ifdef SUNPRO
# define SUNPRO_OBJS sunpro.o
#else
# define SUNPRO_OBJS
#endif

#ifdef HAVE_TTY
#define TTY_OBJS console-tty.o device-tty.o event-tty.o frame-tty.o \
		 objects-tty.o redisplay-tty.o cm.o
#else
#define TTY_OBJS
#endif

#ifdef HAVE_TOOLBARS
#define TOOLBAR_OBJS toolbar.o
#else
#define TOOLBAR_OBJS
#endif
#ifdef HAVE_MENUBARS
#define MENUBAR_OBJS menubar.o
#else
#define MENUBAR_OBJS
#endif
#ifdef HAVE_SCROLLBARS
#define SCROLLBAR_OBJS scrollbar.o
#else
#define SCROLLBAR_OBJS
#endif
#ifdef HAVE_DIALOGS
#define DIALOG_OBJS dialog.o
#else
#define DIALOG_OBJS
#endif
#if defined (HAVE_MENUBARS) || defined (HAVE_SCROLLBARS) || defined (HAVE_DIALOGS) || defined (HAVE_TOOLBARS)
#define GUI_OBJS gui.o
#else
#define GUI_OBJS
#endif

#ifdef HAVE_UNIXOID_EVENT_LOOP
#define EVENT_UNIXOID_OBJS event-unixoid.o
#else
#define EVENT_UNIXOID_OBJS
#endif

/* lastfile must follow all files whose initialized data areas should
   be dumped as pure by dump-emacs.
 */

/* NOTE: The last line cannot be all macros, because make will barf
   if they all come out null. */

objs=	abbrev.o alloc.o blocktype.o buffer.o bytecode.o \
	callint.o callproc.o casefiddle.o casetab.o chartab.o cmdloop.o \
	cmds.o console.o console-stream.o \
	data.o DATABASE_OBJS DEBUG_OBJS device.o DIALOG_OBJS dired.o doc.o \
	doprnt.o dynarr.o \
	editfns.o elhash.o emacs.o ENERGIZE_OBJS eval.o events.o \
	event-stream.o EVENT_UNIXOID_OBJS extents.o \
	faces.o fileio.o filelock.o filemode.o floatfns.o fns.o font-lock.o \
	frame.o \
	general.o getloadavg.o GIF_OBJS glyphs.o GUI_OBJS \
	hash.o \
	indent.o inline.o insdel.o intl.o \
	keymap.o $(RTC_PATCH_O) \
	lread.o lstream.o \
	macros.o marker.o md5.o MENUBAR_OBJS minibuf.o MOCKLISPOBJS \
	NAS_OBJS \
	objects.o opaque.o \
	print.o process.o profile.o pure.o \
	rangetab.o REALPATH_OBJS redisplay.o redisplay-output.o regex.o \
	SCROLLBAR_OBJS search.o signal.o sound.o SOUND_OBJS specifier.o \
	strftime.o SUNPRO_OBJS symbols.o syntax.o sysdep.o \
	TOOLBAR_OBJS TOOLTALK_OBJS TTY_OBJS \
	undo.o UNEXEC \
	XOBJS XMU_OBJS \
	window.o

#ifdef HAVE_TTY
#  ifdef HAVE_NCURSES
/* If your machine needs -ltermcap, define LIBS_TERMCAP to include
   -lncurses -ltermcap in your s or m file (conditionalized on
   HAVE_NCURSES). */
#    ifndef LIBS_TERMCAP
#      define LIBS_TERMCAP -lncurses
#    endif /* LIBS_TERMCAP */
termcapobjs = terminfo.o
#  elif defined (TERMINFO)
/* Used to be -ltermcap here.  If your machine needs that,
   define LIBS_TERMCAP in the m/<machine>.h file.  */
#    ifndef LIBS_TERMCAP
#      define LIBS_TERMCAP -lcurses
#    endif /* LIBS_TERMCAP */
termcapobjs = terminfo.o
#  else /* ! defined (TERMINFO) */
#    ifndef LIBS_TERMCAP
#      define LIBS_TERMCAP
termcapobjs = termcap.o tparam.o
#    else /* LIBS_TERMCAP */
termcapobjs = tparam.o
#    endif /* LIBS_TERMCAP */
#  endif /* ! defined (TERMINFO) */
#else /* !HAVE_TTY */
#  undef LIBS_TERMCAP
#  define LIBS_TERMCAP
#endif /* !HAVE_TTY */


#ifdef REL_ALLOC
rallocobjs = ralloc.o
rallocdocsrc = ralloc.c
#else
rallocobjs =
rallocdocsrc =
#endif

#ifndef SYSTEM_MALLOC
# ifdef GNU_MALLOC  /* New GNU malloc */
#  ifdef ERROR_CHECK_MALLOC
mallocobjs = gmalloc.o free-hook.o vm-limit.o
mallocdocsrc = free-hook.c
#  else
mallocobjs = gmalloc.o vm-limit.o
mallocdocsrc =
#  endif
# else /* Old GNU malloc */
mallocobjs = malloc.o
mallocdocsrc =
# endif /* Old GNU malloc */
#else
mallocobjs =
mallocdocsrc =
#endif /* SYSTEM_MALLOC */

#ifdef FORCE_ALLOCA_H
allocaobjs = alloca.o
#else /* !FORCE_ALLOCA_H */
allocaobjs = @ALLOCA@
#endif /* !FORCE_ALLOCA_H */

#ifdef HAVE_X_WINDOWS

# ifdef EXTERNAL_WIDGET
#  define EXTERNAL_WIDGET_OBJS ExternalShell.o extw-Xt-nonshared.o extw-Xlib-nonshared.o

/* Now we try to figure out how to link a shared library.
   If we cannot figure it out, leave EXTW_LINK undefined and a shared
   library will not be created. */

# ifdef USE_GCC
#  ifdef USG5
#   define EXTW_LINK(objs, output) $(CC) -shared objs -Xlinker -z -Xlinker text -o output
   /* I cannot figure out how to do shared a.out libraries, so just punt. */
#  elif !defined (LINUX) || defined (__ELF__)
#   define EXTW_LINK(objs, output) $(CC) -shared objs -o output
#  endif
# elif defined (USG5)
#  if defined (IRIX)
#   define EXTW_LINK(objs, output) $(LD) -shared -g -check_registry ${TOOLROOT}/usr/lib/so_locations objs -o output
#  else /* not IRIX */
#   define EXTW_LINK(objs, output) $(CC) -G objs -z text -o output
#  endif /* not IRIX */
# else /* not USG5 */
#  if defined (DEC_ALPHA) && defined (OSF1)
#   define EXTW_LINK(objs, output) $(LD) $(LDFLAGS) LD_SWITCH_SHARED -d objs -o output $(LIBES)
#  else /* !(DEC_ALPHA && OSF1) */
#   define EXTW_LINK(objs, output) $(LD) -dc objs -assert pure-text -o output
#  endif /* !(DEC_ALPHA && OSF1) */
# endif /* not USG5 */

#  ifdef LWLIB_USES_MOTIF
#    ifdef EXTW_LINK
#      define MOTIF_OTHER_FILES libextcli_Xm.a libextcli_Xm.so.1 
#    else
#      define MOTIF_OTHER_FILES libextcli_Xm.a
#    endif
#  else
#    define MOTIF_OTHER_FILES
#endif

#  ifdef EXTW_LINK
#    define OTHER_FILES MOTIF_OTHER_FILES \
		        libextcli_Xt.a libextcli_Xt.so.1 \
		        libextcli_Xlib.a libextcli_Xlib.so.1
#  else
#    define OTHER_FILES MOTIF_OTHER_FILES \
		        libextcli_Xt.a libextcli_Xlib.a
#  endif
# else  /* !EXTERNAL_WIDGET */
#  define EXTERNAL_WIDGET_OBJS
# endif /* !EXTERNAL_WIDGET */

# define LIBX11_OBJS EmacsFrame.o EmacsShell.o TopLevelEmacsShell.o TransientEmacsShell.o EmacsManager.o EXTERNAL_WIDGET_OBJS
# define LWLIB_DEPS $(LWLIBBUILDDIR)/liblw.a

#else /* !X */
# define LIBX11_OBJS
# define LWLIB_DEPS
#endif

/* define otherobjs as list of object files that make-docfile
   should not be told about.  */
otherobjs= $(termcapobjs) BTLOBJS lastfile.o $(mallocobjs) $(rallocobjs) $(allocaobjs) LIBX11_OBJS

#ifdef LISP_FLOAT_TYPE
#define FLOAT_LISP ${lispdir}prim/float-sup.elc
#else
#define FLOAT_LISP
#endif

#ifdef HAVE_X_WINDOWS
/* lisp files preloaded if compiled with support for X Windows */
# ifdef HAVE_TOOLBARS
#  define X11_TOOLBAR_LISP ${lispdir}x11/x-toolbar.elc
# else
#  define X11_TOOLBAR_LISP
# endif
# ifdef HAVE_MENUBARS
#  define X11_MENUBAR_LISP ${lispdir}x11/x-menubar.elc
# else
#  define X11_MENUBAR_LISP
# endif
# ifdef HAVE_SCROLLBARS
#  define X11_SCROLLBAR_LISP ${lispdir}x11/x-scrollbar.elc
# else
#  define X11_SCROLLBAR_LISP
# endif
#define X11_LISP X11_MENUBAR_LISP \
	${lispdir}x11/x-faces.elc \
	${lispdir}x11/x-iso8859-1.elc ${lispdir}x11/x-mouse.elc \
	${lispdir}x11/x-select.elc X11_SCROLLBAR_LISP \
	X11_TOOLBAR_LISP ${lispdir}x11/x-misc.elc \
	${lispdir}x11/x-init.elc
#else
#define X11_LISP
#endif

#ifdef HAVE_TTY
/* lisp files preloaded if compiled with support for tty */
#define TTY_LISP ${lispdir}term/tty-init.elc
#else
#define TTY_LISP
#endif

#ifdef MULE
#ifdef HAVE_X_WINDOWS
# define MULE_X11_LISP ${lispdir}mule/mule-x-init.elc
#else
# define MULE_X11_LISP
#endif
#define MULE_LISP \
	${lispdir}mule/mule-load.elc ${lispdir}mule/mule-coding.elc \
	${lispdir}mule/mule-charset.elc ${lispdir}mule/mule-files.elc \
	${lispdir}mule/mule-category.elc ${lispdir}mule/mule-misc.elc \
	${lispdir}mule/mule-ccl.elc ${lispdir}mule/mule-init.elc \
	${lispdir}mule/kinsoku.elc \
	MULE_X11_LISP \
	${lispdir}mule/arabic-hooks.elc \
	${lispdir}mule/chinese-hooks.elc \
	${lispdir}mule/cyrillic-hooks.elc \
	${lispdir}mule/ethiopic-hooks.elc \
	${lispdir}mule/european-hooks.elc \
	${lispdir}mule/greek-hooks.elc \
	${lispdir}mule/hebrew-hooks.elc	\
	${lispdir}mule/ipa-hooks.elc \
	${lispdir}mule/japanese-hooks.elc \
	${lispdir}mule/korean-hooks.elc \
	${lispdir}mule/thai-hooks.elc \
	${lispdir}mule/vietnamese-hooks-1.elc \
	${lispdir}mule/vietnamese-hooks-2.elc

#define NOMULE_LISP
#else
#define MULE_LISP
#define NOMULE_LISP ${lispdir}prim/files-nomule.elc
#endif

#ifdef ENERGIZE
/* Lisp files preloaded if compiled with support for Energize */
#define ENERGIZE_LISP \
	${lispdir}comint/gdb.elc \
	${lispdir}comint/comint.elc ${lispdir}comint/shell.elc \
	${lispdir}utils/ring.elc ${lispdir}packages/compile.elc \
	${lispdir}modes/view-less.elc ${lispdir}emulators/evi.elc \
	${lispdir}packages/font-lock.elc ${lispdir}packages/fast-lock.elc \
	${lispdir}dired/dired.elc ${lispdir}dired/dired-x.elc \
	${lispdir}dired/dired-lucid.elc ${lispdir}prim/userlock.elc \
	${lispdir}energize/energize-init.elc \
	${lispdir}energize/energize-mode.elc \
	${lispdir}energize/energize-windows.elc \
	${lispdir}energize/energize-menus.elc \
	${lispdir}energize/energize-shell.elc \
	${lispdir}energize/energize-visit-use.elc \
	${lispdir}energize/energize-vi.elc \
	${lispdir}energize/energize-font-lock.elc \
	${lispdir}energize/energize-advice.elc
#else
#define ENERGIZE_LISP
#endif

#ifdef SUNPRO
/* Lisp files preloaded if compiled with support for SunPro products */
#define SUNPRO_LISP \
	${lispdir}packages/sccs.elc \
	${lispdir}sunpro/sunpro-init.elc \
	${lispdir}sunpro/sunpro-menubar.elc \
	${lispdir}sunpro/sunpro-keys.elc \
	${lispdir}eos/sun-eos-init.elc \
	${lispdir}eos/sun-eos-load.elc \
	${lispdir}eos/sun-eos-common.elc \
	${lispdir}eos/sun-eos-editor.elc \
	${lispdir}eos/sun-eos-browser.elc \
	${lispdir}eos/sun-eos-debugger.elc \
	${lispdir}eos/sun-eos-debugger-extra.elc \
	${lispdir}eos/sun-eos-toolbar.elc \
	${lispdir}eos/sun-eos-menubar.elc \
	${lispdir}comint/comint.elc \
	${lispdir}utils/ring.elc \
	${lispdir}utils/annotations.elc \
	${lispdir}modes/cc-mode.elc \
	${lispdir}modes/imenu.elc \
	${lispdir}utils/reporter.elc
#else
#define SUNPRO_LISP
#endif

#ifdef TOOLTALK
/* Lisp files preloaded if compiled with support for Tooltalk */
#define TOOLTALK_LISP \
	${lispdir}tooltalk/tooltalk-load.elc \
	${lispdir}tooltalk/tooltalk-macros.elc \
	${lispdir}tooltalk/tooltalk-util.elc \
	${lispdir}tooltalk/tooltalk-init.elc
#else
#define TOOLTALK_LISP
#endif

#ifdef LISP_COMMAND_LOOP
#define CMDLOOP_LISP ${lispdir}prim/cmdloop1.elc
#else
#define CMDLOOP_LISP
#endif

#ifdef HAVE_TOOLBARS
#define TOOLBAR_LISP ${lispdir}prim/toolbar.elc
#else
#define TOOLBAR_LISP
#endif
#ifdef HAVE_MENUBARS
#define MENUBAR_LISP ${lispdir}prim/menubar.elc
#else
#define MENUBAR_LISP
#endif
#ifdef HAVE_SCROLLBARS
#define SCROLLBAR_LISP ${lispdir}prim/scrollbar.elc
#else
#define SCROLLBAR_LISP
#endif
#ifdef HAVE_DIALOGS
#define DIALOG_LISP ${lispdir}prim/dialog.elc
#else
#define DIALOG_LISP
#endif
#ifdef HAVE_WINDOW_SYSTEM
#define MOUSE_LISP \
	${lispdir}prim/gui.elc \
	${lispdir}prim/mouse.elc \
	${lispdir}prim/mode-motion.elc
#else
#define MOUSE_LISP
#endif

/* List of Lisp files loaded into the dumped Emacs.
   Every file that is loaded from loadup.el must be enumerated
   here, or the functions will have no docstrings.
   This is dumb - this list should be generated automatically.
   [Note: "version.el" is included in the doc separately, but is not listed 
    here because we do not want things to appear to be out-of-date just 
    because the version number has been incremented. -- D.N.G. 8/28/93]
 */
lisp=   ${lispdir}paths.el \
	${lispdir}prim/loaddefs.elc ${lispdir}prim/auto-autoloads.elc \
        ${lispdir}prim/loadup.el ${lispdir}prim/subr.elc \
        ${lispdir}prim/cmdloop.elc CMDLOOP_LISP \
	${lispdir}utils/text-props.elc MOUSE_LISP \
        ${lispdir}prim/keymap.elc ${lispdir}prim/syntax.elc \
        ${lispdir}prim/minibuf.elc ${lispdir}prim/faces.elc \
	${lispdir}prim/objects.elc ${lispdir}prim/process.elc \
        ${lispdir}prim/keydefs.elc ${lispdir}prim/device.elc \
	${lispdir}prim/obsolete.elc ${lispdir}prim/glyphs.elc \
	${lispdir}prim/extents.elc ${lispdir}prim/backquote.elc \
	${lispdir}prim/events.elc ${lispdir}prim/console.elc \
        ${lispdir}utils/map-ynp.elc ${lispdir}prim/modeline.elc \
        ${lispdir}prim/profile.elc ${lispdir}modes/list-mode.elc \
	${lispdir}utils/derived.elc ${lispdir}cl/cl.elc \
	${lispdir}cl/cl-defs.elc ${lispdir}prim/undo-stack.elc \
        ${lispdir}prim/simple.elc ${lispdir}prim/help.elc \
        ${lispdir}prim/files.elc ${lispdir}utils/lib-complete.elc \
	${lispdir}prim/indent.elc ${lispdir}prim/frame.elc \
	TOOLBAR_LISP ${lispdir}prim/format.elc \
        ${lispdir}prim/window.elc ${lispdir}prim/startup.elc \
        ${lispdir}prim/lisp.elc ${lispdir}prim/page.elc \
        ${lispdir}prim/register.elc ${lispdir}iso/iso8859-1.elc \
        ${lispdir}prim/paragraphs.elc ${lispdir}modes/lisp-mode.elc \
        ${lispdir}modes/text-mode.elc ${lispdir}prim/fill.elc \
        ${lispdir}prim/isearch-mode.elc ${lispdir}prim/misc.elc \
	${lispdir}packages/vc-hooks.elc \
        ${lispdir}prim/replace.elc ${lispdir}prim/specifier.elc \
        ${lispdir}modes/auto-show.elc SUNPRO_LISP TTY_LISP \
        ${lispdir}bytecomp/bytecomp-runtime.elc FLOAT_LISP \
        ${lispdir}prim/itimer.elc ${lispdir}prim/itimer-autosave.elc \
	${lispdir}ediff/ediff-hook.elc \
	${lispdir}custom/widget.elc ${lispdir}custom/custom.elc \
	${lispdir}prim/custom-load.elc ${lispdir}prim/cus-start.elc \
	${lispdir}packages/fontl-hooks.elc SCROLLBAR_LISP \
	${lispdir}prim/buffer.elc MENUBAR_LISP \
	${lispdir}packages/buff-menu.elc DIALOG_LISP MULE_LISP NOMULE_LISP \
	${lispdir}modes/abbrev.elc X11_LISP ENERGIZE_LISP TOOLTALK_LISP

/* Other Lisp files that are not dumped out but where it is convenient
   (or required?) for them to be byte-compiled early, before xemacs is
   dumped out.  Avoid listing them in ${lisp} because then the
   doc-snarfing routines get confused. */
otherlisp= ${lispdir}bytecomp/bytecomp.elc \
	   ${lispdir}bytecomp/byte-optimize.elc \
	   ${lispdir}utils/advice.elc

LIBES = NAS_LIBS ${native_sound_lib} SOCKS_LIBS ENERGIZE_LIBS LIB_CDE LIB_OFFIX_DND \
	LIB_TOOLTALK $(LIBX) \
	LIBS_SYSTEM LIBS_MACHINE LIBS_TERMCAP \
	LIB_CANNA LIB_WNN LIB_INTL QUANTIFY_LIBS $(LIB_KSTAT) \
	DATABASE_LIBS LIBS_DEBUG $(GNULIB_VAR) LIB_MATH LIB_STANDARD \
	$(GNULIB_VAR)

/* Enable recompilation of certain other files depending on system type.  */

#ifndef OTHER_FILES
#define OTHER_FILES
#endif

/* Enable inclusion of object files in temacs depending on system type.  */
#ifndef OBJECTS_SYSTEM
#define OBJECTS_SYSTEM
#endif

#ifndef OBJECTS_MACHINE
#define OBJECTS_MACHINE
#endif

all: xemacs OTHER_FILES

/* "make release" to build "xemacs" with an incremented version number;
   "make xemacs" to just build "xemacs" without incrementing the version. */

#ifdef I18N3
modir = ${etcdir}
# define MOFILE ${modir}emacs.mo
#else
# define MOFILE
#endif

LOADPATH =  EMACSLOADPATH="${lispdir}prim"  
DUMPENV = $(LOADPATH)

release: temacs ${lisp} ${libsrc}DOC MOFILE OTHER_FILES
#ifdef CANNOT_DUMP
	ln temacs xemacs
#else
#ifdef HAVE_SHM
	-if [ -w ${srcdir}/../lisp ]; then \
	  w=`pwd`; cd ${srcdir} && $${w}/temacs -nl -batch -l inc-vers; \
	else true; fi
	@touch SATISFIED
	-$(DUMPENV) ./temacs -nl -batch -l loadup.el dump
	@if [ ! -f SATISFIED ]; then \
		$(MAKE) release; \
	fi
	@/bin/rm -f SATISFIED
#else /* ! defined (HAVE_SHM) */
	-if [ -w ${srcdir}/../lisp ]; then \
	  w=`pwd`; cd ${srcdir} && $${w}/temacs -batch -l inc-vers; \
	else true; fi
	@touch SATISFIED
	-$(DUMPENV) ./temacs -batch -l loadup.el dump
	@if [ ! -f SATISFIED ]; then \
		$(MAKE) release; \
	fi
	@/bin/rm -f SATISFIED
#endif /* ! defined (HAVE_SHM) */
	touch release
#endif /* ! defined (CANNOT_DUMP) */

xemacs: temacs ${libsrc}DOC ${lisp} MOFILE OTHER_FILES
	@touch SATISFIED
	-$(DUMPENV) ./temacs -batch -l loadup.el dump
	@if [ ! -f SATISFIED ]; then \
		$(MAKE) xemacs; \
	fi
	@/bin/rm -f SATISFIED

xemacs-no-site-file: temacs ${libsrc}DOC ${lisp} MOFILE OTHER_FILES
	@touch SATISFIED
	-$(DUMPENV) ./temacs -batch -l loadup.el dump no-site-file
	@if [ ! -f SATISFIED ]; then \
		$(MAKE) xemacs-no-site-file; \
	fi
	@/bin/rm -f SATISFIED

obj_src = $(objs:.o=.c)

#ifdef DYNODUMP
$(DYNODUMPBUILDDIR)/dynodump.so: force
	cd ${DYNODUMPBUILDDIR} && ${MAKE} ${MFLAGS}
#endif

#ifdef NO_DOC_FILE
${libsrc}DOC: ${libsrc}make-docfile
#else
${libsrc}DOC: ${libsrc}make-docfile ${obj_src} ${mule_obj_src} ${lisp}
#endif
	rm -f ${libsrc}DOC
	${libsrc}make-docfile -d ${srcdir} -i ${libsrc}../site-packages \
		${obj_src} ${mule_obj_src} \
	        ${mallocdocsrc} ${rallocdocsrc} ${lispdir}version.el \
		${lisp} > ${libsrc}DOC

dump_elcs: dump-elcs

dump-elcs: temacs
	@touch SATISFIED
	-$(LOADPATH) ./temacs -batch -l ../prim/update-elc.el $(lisp) $(otherlisp)
	@if [ ! -f SATISFIED ]; then \
		$(MAKE) dump-elcs; \
	fi
	@/bin/rm -f SATISFIED

all-elc all-elcs:
	cd .. && $(MAKE) all-elc $(MFLAGS)

#ifdef I18N3

# if defined(SPARC) && !defined(USG)
   xgettext=		 /usr/openwin/bin/xgettext
   xgettext_args=	 -o emacs -m_X messages
   msgfmt=		 /usr/openwin/bin/msgfmt
# else
   xgettext=		 xgettext
   xgettext_args=	 -s -d emacs -M_X messages
   msgfmt=		 msgfmt
#endif

${modir}emacs.po: ${libsrc}make-msgfile ${libsrc}make-po ${objs} ${mule_objs} ${lisp}
	${libsrc}make-msgfile -o ${libsrc}messages ${objs} ${mule_objs} ${lisp} ${otherlisp}
	cd ${libsrc} && ${xgettext} ${xgettext_args}
	rm -f ${modir}emacs.po
	cd ${libsrc} && ${libsrc}make-po -a ${modir}emacs.po DOC

${modir}emacs.mo: ${modir}emacs.po
	cd ${modir} && ${msgfmt} -o emacs.mo emacs.po

${libsrc}make-msgfile:
	cd ${libsrc} && ${MAKE} ${MFLAGS} make-msgfile

${libsrc}make-po:
	cd ${libsrc} && ${MAKE} ${MFLAGS} make-po

#endif /* I18N3 */

${libsrc}make-docfile:
	cd ${libsrc} && ${MAKE} ${MFLAGS} make-docfile

/* Lint Section */
LINT.c=$(LINT) $(LINTFLAGS) $(LINTINCLUDES) 
LINTFILES= $(objs:.o=.ln)
LINTINCLUDES = -Demacs -DHAVE_CONFIG_H $(MYCPPFLAG) -I. \
	   -I${srcdir} LCCFLAGS C_SWITCH_MACHINE C_SWITCH_SYSTEM \
	   C_SWITCH_SITE C_SWITCH_X_SITE C_SWITCH_X_MACHINE \
	   C_SWITCH_X_SYSTEM $(LIBX11_INCLUDES)
/* LINTFLAGS= -fd -m -p -s -u -v -x */
LINTFLAGS= -fd -m -s -u -v -x
lint: $(LINTFILES)
	$(LINT.c) $(LINTFILES)
/* end of Lint Section */

force:
$(LWLIBBUILDDIR)/liblw.a: force
	cd ${LWLIBBUILDDIR} && ${MAKE} ${MFLAGS}

/* Some systems define this to cause parallel Make-ing.  */
#ifndef MAKE_PARALLEL
#define MAKE_PARALLEL
#endif

#define TEMACS_DEPS       MAKE_PARALLEL $(LOCALCPP) $(SHORT) $(STARTFILES) \
			  ${objs} ${mule_objs} ${otherobjs} OBJECTS_SYSTEM \
			  OBJECTS_MACHINE LWLIB_DEPS DYNODUMP_DEPS prefix-args

#define TEMACS_LINK_ARGS  YMF_PASS_LDFLAGS \
		(${STARTFLAGS} ${LDFLAGS} LD_SWITCH_CALL_SHARED) -o $@ \
		${STARTFILES} ${objs} ${mule_objs} ${otherobjs} OBJECTS_SYSTEM \
		OBJECTS_MACHINE ${LIBES}

temacs_deps: TEMACS_DEPS

temacs: TEMACS_DEPS
	$(LD) LCCLINK TEMACS_LINK_ARGS

cemacs: TEMACS_DEPS
	$(LD) $(ENERGIZEP) TEMACS_LINK_ARGS

rtc_patch.o:
	rtc_patch_area -o $@

rtcmacs: TEMACS_DEPS rtc_patch.o
	rm -f temacs; $(MAKE) $(MAKE_FLAGS) temacs RTC_PATCH_O=rtc_patch.o
	mv temacs rtcmacs

rtcrun: rtcmacs
	dbx -q -C -c \
	'dbxenv rtc_error_log_file_name /dev/fd/1; \
	dbxenv suppress_startup_message 5.0; \
	ignore POLL; \
	check -access; \
	suppress rui; \
	runargs -batch -l loadup.el run-temacs -q; \
	run' rtcmacs

puremacs: TEMACS_DEPS
	$(PURIFY_PROG) $(PURIFY_FLAGS) $(LD) TEMACS_LINK_ARGS

quantmacs: TEMACS_DEPS
	$(QUANTIFY_PROG) $(QUANTIFY_FLAGS) $(LD) TEMACS_LINK_ARGS

covmacs: TEMACS_DEPS
	$(PURECOV_PROG) $(LD) TEMACS_LINK_ARGS

TopLevelEmacsShell.o : ${srcdir}/EmacsShell-sub.c
	$(CC) -c $(ALL_CFLAGS) -DDEFINE_TOP_LEVEL_EMACS_SHELL ${srcdir}/EmacsShell-sub.c
	mv EmacsShell-sub.o TopLevelEmacsShell.o

TransientEmacsShell.o : ${srcdir}/EmacsShell-sub.c TopLevelEmacsShell.o
	$(CC) -c $(ALL_CFLAGS) -DDEFINE_TRANSIENT_EMACS_SHELL ${srcdir}/EmacsShell-sub.c
	mv EmacsShell-sub.o TransientEmacsShell.o

#ifdef EXTERNAL_WIDGET

#if USE_GCC
# define PIC_ARG -fpic
#else
# ifdef IRIX
#  define PIC_ARG -KPIC
# else
#  define PIC_ARG -K pic
# endif
#endif

# define EXTERNAL_CLIENT_MOTIF_OBJS_SHARED ExternalClient-Xm-shared.o extw-Xt-shared.o extw-Xlib-shared.o
# define EXTERNAL_CLIENT_XT_OBJS_SHARED    ExternalClient-Xt-shared.o extw-Xt-shared.o extw-Xlib-shared.o
# define EXTERNAL_CLIENT_XLIB_OBJS_SHARED  ExternalClient-Xlib-shared.o extw-Xlib-shared.o
# define EXTERNAL_CLIENT_MOTIF_OBJS_NONSHARED ExternalClient-Xm-nonshared.o extw-Xt-nonshared.o extw-Xlib-nonshared.o
# define EXTERNAL_CLIENT_XT_OBJS_NONSHARED    ExternalClient-Xt-nonshared.o extw-Xt-nonshared.o extw-Xlib-nonshared.o
# define EXTERNAL_CLIENT_XLIB_OBJS_NONSHARED  ExternalClient-Xlib-nonshared.o extw-Xlib-nonshared.o

/* Add dependencies so things work right with a parallel make */ 
ExternalClient-Xm-shared.o: ${srcdir}/ExternalClient.c ExternalClient-Xt-shared.o ExternalClient-Xm-nonshared.o
	$(CC) -c PIC_ARG $(ALL_CFLAGS) -DEXTW_USES_MOTIF ${srcdir}/ExternalClient.c
	mv ExternalClient.o ExternalClient-Xm-shared.o

ExternalClient-Xt-shared.o: ${srcdir}/ExternalClient.c ExternalClient-Xt-nonshared.o
	$(CC) -c PIC_ARG $(ALL_CFLAGS) ${srcdir}/ExternalClient.c
	mv ExternalClient.o ExternalClient-Xt-shared.o

ExternalClient-Xlib-shared.o: ${srcdir}/ExternalClient-Xlib.c ExternalClient-Xlib-nonshared.o
	$(CC) -c PIC_ARG $(ALL_CFLAGS) ${srcdir}/ExternalClient-Xlib.c
	mv ExternalClient-Xlib.o ExternalClient-Xlib-shared.o

ExternalClient-Xm-nonshared.o: ${srcdir}/ExternalClient.c ExternalClient-Xt-nonshared.o
	$(CC) -c $(ALL_CFLAGS) -DEXTW_USES_MOTIF ${srcdir}/ExternalClient.c
	mv ExternalClient.o ExternalClient-Xm-nonshared.o

ExternalClient-Xt-nonshared.o: ${srcdir}/ExternalClient.c
	$(CC) -c $(ALL_CFLAGS) ${srcdir}/ExternalClient.c
	mv ExternalClient.o ExternalClient-Xt-nonshared.o

ExternalClient-Xlib-nonshared.o: ${srcdir}/ExternalClient-Xlib.c
	$(CC) -c $(ALL_CFLAGS) ${srcdir}/ExternalClient-Xlib.c
	mv ExternalClient-Xlib.o ExternalClient-Xlib-nonshared.o

/* We compile the common files twice (once with PIC and once without)
   because on some systems, compiling with PIC but not linking into
   a shared library messes things up. */
extw-Xt-shared.o: ${srcdir}/extw-Xt.c extw-Xt-nonshared.o
	$(CC) -c PIC_ARG $(ALL_CFLAGS) ${srcdir}/extw-Xt.c
	mv extw-Xt.o extw-Xt-shared.o

extw-Xlib-shared.o: ${srcdir}/extw-Xlib.c extw-Xlib-nonshared.o
	$(CC) -c PIC_ARG $(ALL_CFLAGS) ${srcdir}/extw-Xlib.c
	mv extw-Xlib.o extw-Xlib-shared.o

extw-Xt-nonshared.o: ${srcdir}/extw-Xt.c
	$(CC) -c $(ALL_CFLAGS) ${srcdir}/extw-Xt.c
	mv extw-Xt.o extw-Xt-nonshared.o

extw-Xlib-nonshared.o: ${srcdir}/extw-Xlib.c
	$(CC) -c $(ALL_CFLAGS) ${srcdir}/extw-Xlib.c
	mv extw-Xlib.o extw-Xlib-nonshared.o

libextcli_Xm.a: EXTERNAL_CLIENT_MOTIF_OBJS_NONSHARED
	ar r libextcli_Xm.a EXTERNAL_CLIENT_MOTIF_OBJS_NONSHARED

libextcli_Xt.a: EXTERNAL_CLIENT_XT_OBJS_NONSHARED
	ar r libextcli_Xt.a EXTERNAL_CLIENT_XT_OBJS_NONSHARED

libextcli_Xlib.a: EXTERNAL_CLIENT_XLIB_OBJS_NONSHARED
	ar r libextcli_Xlib.a EXTERNAL_CLIENT_XLIB_OBJS_NONSHARED

#ifdef EXTW_LINK

libextcli_Xm.so.1: EXTERNAL_CLIENT_MOTIF_OBJS_SHARED
	EXTW_LINK(EXTERNAL_CLIENT_MOTIF_OBJS_SHARED, libextcli_Xm.so.1)

libextcli_Xt.so.1: EXTERNAL_CLIENT_XT_OBJS_SHARED
	EXTW_LINK(EXTERNAL_CLIENT_XT_OBJS_SHARED, libextcli_Xt.so.1)

libextcli_Xlib.so.1: EXTERNAL_CLIENT_XLIB_OBJS_SHARED
	EXTW_LINK(EXTERNAL_CLIENT_XLIB_OBJS_SHARED, libextcli_Xlib.so.1)

#endif

#endif /* EXTERNAL_WIDGET */

prefix-args: ${srcdir}/prefix-args.c config.h
	$(CC) $(ALL_CFLAGS) ${srcdir}/prefix-args.c -o prefix-args

/* These are needed for C compilation, on the systems that need them */
#ifdef NEED_CPP
CPP = ./localcpp
localcpp:
	cd ${cppdir} && ${MAKE} ${MFLAGS} EMACS=-DEMACS
	ln ${cppdir}cpp localcpp  /* Name where ALL_CFLAGS will refer to it */
/* cc appears to be cretinous and require all of these to exist
   if -B is specified -- we cannot use one local pass and let the
   others be the standard ones.  What a loser.
   We cannot even use ln, since they are probably
   on different disks.  */
	cp /lib/ccom localccom
	-cp /lib/optim localoptim
	-cp /lib/c2 localc2
	cp /bin/as localas
#else /* ! defined (NEED_CPP) */
CPP = $(CC) -E
#endif /* ! defined (NEED_CPP) */

#ifdef SHORTNAMES
shortnames:
	cd ${shortnamesdir} && ${MAKE} ${MFLAGS}
#endif

config.h: ${srcdir}/config.h.in
	@echo "The file config.h needs to be set up from config.h.in."
	@echo "Consult the file \`INSTALL' for instructions for building Emacs."
	exit 1

puresize_adjust.h: ${srcdir}/puresize.h
	@echo "The file puresize_adjust still needs to be generated."
	@echo "Please run 'make' from the top-level."
	exit 1

paths.h: ${srcdir}/paths.h.in
	@echo "The file paths.h needs to be set up from paths.h.in."
	@echo "Consult the file \`INSTALL' for instructions for building Emacs."
	exit 1

Emacs.ad.h: ${srcdir}/${etcdir}Emacs.ad
	@echo "The file Emacs.ad.h needs to be set up from ${srcdir}/${etcdir}Emacs.ad"
	@echo "Consult the file \`INSTALL' for instructions for building Emacs."
	exit 1

/* Cover your eyes, please */
xemacs-version.h: ../lisp/version.el
	@echo "#define main_1 xemacs_`grep emacs-version ../lisp/version.el | sed -e 's/.*\"\(.*\)\.\(.*\)\"/\1_\2/' -e 1q`_`grep -i xemacs.*lucid.*beta ../lisp/version.el | sed -e 's/.*\(beta[0-9]*\).*/\1/' -e 1q`" > xemacs-version.h


/* Some machines have alloca built-in.
   They should define HAVE_ALLOCA, or may just let alloca.s
   be used but generate no code.
   Some have it written in assembler in alloca.s.
   Some use the C version in alloca.c (these define C_ALLOCA in config.h).
   */

#ifdef C_ALLOCA
/* We could put something in alloca.c to #define free and malloc
   whenever emacs was #defined, but that's not appropriate for all
   users of alloca in Emacs.  Check out ../lib-src/getopt.c.  */
alloca.o : ${srcdir}/alloca.c
	$(CC) -c $(CPPFLAGS) -Dfree=xfree -Dmalloc=xmalloc \
	$(ALL_CFLAGS) $<
#else
#ifndef HAVE_ALLOCA
alloca.o : ${srcdir}/alloca.s config.h
/* $(CPP) is cc -E, which may get confused by filenames
   that do not end in .c.  So copy file to a safe name.  */
	cp ${srcdir}/alloca.s allocatem.c
/* Remove any ^L, blank lines, and preprocessor comments,
   since some assemblers barf on them.  Use a different basename for the
   output file, since some stupid compilers (Green Hill) use that
   name for the intermediate assembler file. */
	$(CPP) $(CPPFLAGS) $(ALL_CFLAGS) allocatem.c | \
	sed -e 's///' -e 's/^#.*//' | \
	sed -n -e '/^..*$$/p' > allocax.s
	-rm -f alloca.o
/* Xenix, in particular, needs to run assembler via cc.  */
	$(CC) -c allocax.s
	mv allocax.o alloca.o
	rm -f allocax.s allocatem.c
#endif /* HAVE_ALLOCA */
#endif /* ! defined (C_ALLOCA) */

#ifdef USE_LCC  /* lcc doesn't do asm() yet */
ecrt0.o: ${srcdir}/ecrt0.c
	gcc -c -g -Demacs $<
#endif /* USE_LCC */

#ifdef EMACS_BTL
BTL_INCLUDES=-I$(BTLDIR)
# define BTL_COMPILE \
	-DEMACS_BTL -D`lucid-arch` -I. $(BTL_INCLUDES) $(BTLDIR)/$(@:.o=.c)

cadillac-btl.o cadillac-btl-process.o cadillac-btl-emacs.o:
	$(CC) $(CFLAGS) -c BTL_COMPILE
# ifndef USE_LCC
cadillac-btl-asm.o:
	$(CC) $(CFLAGS) -c BTL_COMPILE
# else  /* lcc doesn't do asm() yet */
cadillac-btl-asm.o:
	gcc -O -g       -c BTL_COMPILE
# endif /* lcc */
#endif /* EMACS_BTL */

#ifdef ENERGIZE
energize.o: ${srcdir}/energize.c
	$(CC) -c $(CPPFLAGS) $(ALL_CFLAGS) ENERGIZE_INCLUDES $(BTL_INCLUDES) $<
#endif /* ENERGIZE */

#ifdef HAVE_NATIVE_SOUND
# if defined (SUNOS4) || defined (SOLARIS2)
sunplay.o: ${srcdir}/sunplay.c
	$(CC) -c $(ALL_CFLAGS) SOUND_CFLAGS $<
# endif /* SUNOS4 or SOLARIS2 */
# ifdef hp9000s800
hpplay.o: ${srcdir}/hpplay.c
	$(CC) -c -Demacs $(ALL_CFLAGS) SOUND_CFLAGS $<
# endif /* hp9000s800 */
#endif /* HAVE_NATIVE_SOUND */

#ifdef HAVE_NAS_SOUND
nas.o: ${srcdir}/nas.c
	$(CC) -c $(ALL_CFLAGS) NAS_CFLAGS $<
#endif /* HAVE_NAS_SOUND */

#ifdef MULE

mule-canna.o: ${MULESRCDIR}/mule-canna.c
	$(CC) -c $(ALL_CFLAGS) ${MULESRCDIR}/mule-canna.c
mule-wnnfns.o: ${MULESRCDIR}/mule-wnnfns.c
	$(CC) -c $(ALL_CFLAGS) ${MULESRCDIR}/mule-wnnfns.c
mule.o: ${MULESRCDIR}/mule.c
	$(CC) -c $(ALL_CFLAGS) ${MULESRCDIR}/mule.c
mule-ccl.o: ${MULESRCDIR}/mule-ccl.c
	$(CC) -c $(ALL_CFLAGS) ${MULESRCDIR}/mule-ccl.c
mule-charset.o: ${MULESRCDIR}/mule-charset.c
	$(CC) -c $(ALL_CFLAGS) ${MULESRCDIR}/mule-charset.c
mule-coding.o: ${MULESRCDIR}/mule-coding.c
	$(CC) -c $(ALL_CFLAGS) ${MULESRCDIR}/mule-coding.c

#endif

/* System-specific programs to be made.
   OTHER_FILES, OBJECTS_SYSTEM and OBJECTS_MACHINE
   select which of these should be compiled.  */

${libsrc}emacstool: ${libsrc}emacstool.c
	cd ${libsrc} && ${MAKE} ${MFLAGS} emacstool
mostlyclean:
	rm -f temacs puremacs quantmacs prefix-args xmakefile* core depend.* \#* *.o
	rm -f ${libsrc}DOC
clean: mostlyclean
	rm -f xemacs libextcli*
/**/# This is used in making a distribution.
/**/# Do not use it on development directories!
distclean: clean versionclean
	rm -f config.h paths.h puresize_adjust.h Emacs.ad.h Makefile Makefile.in .pure version.h
realclean: distclean
	rm -f TAGS
versionclean:
	-rm -f xemacs ${libsrc}DOC
extraclean: realclean
	-rm -f *~ \#* m/?*~ s/?*~

/* The rule for the [sm] files has to be written a little funny to
   avoid looking like a C comment to CPP. */
SOURCES = *.[chm] *.pswm [sm]/?* COPYING paths.h.in Makefile.in.in \
	config.h.in README COPYING ChangeLog
unlock:
	chmod u+w $(SOURCES)

relock:
	chmod -w $(SOURCES)

#ifdef __GNUC__

/*** Dependency processing using GCC ***/

.c.dep:
	$(CC) -MM $(ALL_CFLAGS) $< > $*.dep

.SUFFIXES: .dep

obj_dep = $(objs:.o=.dep)
mule_obj_dep = $(mule_objs:.o=.dep)

#ifdef MULE

/* Ugh, there should be a better way of handling this. */

mule-canna.dep: ${MULESRCDIR}/mule-canna.c
	$(CC) -MM $(ALL_CFLAGS) ${MULESRCDIR}/mule-canna.c > mule-canna.dep
mule-wnnfns.dep: ${MULESRCDIR}/mule-wnnfns.c
	$(CC) -MM $(ALL_CFLAGS) ${MULESRCDIR}/mule-wnnfns.c > mule-wnnfns.dep
mule.dep: ${MULESRCDIR}/mule.c
	$(CC) -MM $(ALL_CFLAGS) ${MULESRCDIR}/mule.c > mule.dep
mule-ccl.dep: ${MULESRCDIR}/mule-ccl.c
	$(CC) -MM $(ALL_CFLAGS) ${MULESRCDIR}/mule-ccl.c > mule-ccl.dep
mule-charset.dep: ${MULESRCDIR}/mule-charset.c
	$(CC) -MM $(ALL_CFLAGS) ${MULESRCDIR}/mule-charset.c > mule-charset.dep
mule-coding.dep: ${MULESRCDIR}/mule-coding.c
	$(CC) -MM $(ALL_CFLAGS) ${MULESRCDIR}/mule-coding.c > mule-coding.dep

#endif /* MULE */

gnu-depend: $(obj_dep)
	/* #### Needs a bit of work: it doesn't see the object files that
	   we are not compiling */
	cat $(obj_dep) | sh ${libsrc}process-gnu-depends.sh > depend.out

#endif /* GCC */

/*** Dependency processing using makedepend ***/

depend:
	: > depend.tmp
	makedepend -f depend.tmp -Dsubprocesses -DMOCKLISP_SUPPORT \
		   -DHAVE_X_WINDOWS -DMULE -- $(CPPFLAGS) $(ALL_CFLAGS) \
		   -- *.c
	sh ${libsrc}process-depends.sh < depend.tmp > depend.out
	egrep '^mule|[^a-zA-Z]mule' depend.out > /tmp/depend1.$$
	grep -v '^mule' depend.out | grep -v '[^a-zA-Z]mule' > /tmp/depend2.$$
	echo '#ifdef MULE' > depend.out
	cat /tmp/depend1.$$ >> depend.out
	/* The things you have to do to pay homage to the lexer God ...
	   truly frightening. */
	echo '#endif /''* MULE *''/' >> depend.out
	echo '' >> depend.out
	cat /tmp/depend2.$$ >> depend.out
	rm -f /tmp/depend1.$$ /tmp/depend2.$$

/* Manually-generated dependencies (makedepend misbehaves on these) */

/* (actually makedepend does OK on these but we want to conditionalize
   them) */
#ifdef EXTERNAL_WIDGET
ExternalClient-Xlib.o: extw-Xlib.h
ExternalClient-Xm.o: config.h
ExternalClient-Xm.o: xintrinsicp.h
ExternalClient-Xm.o: ExternalClient.h
ExternalClient-Xm.o: ExternalClientP.h
ExternalClient-Xm.o: extw-Xlib.h
ExternalClient-Xm.o: extw-Xt.h
ExternalClient-Xt.o: config.h
ExternalClient-Xt.o: xintrinsicp.h
ExternalClient-Xt.o: ExternalClient.h
ExternalClient-Xt.o: ExternalClientP.h
ExternalClient-Xt.o: extw-Xlib.h
ExternalClient-Xt.o: extw-Xt.h
ExternalShell.o: ExternalShell.h
ExternalShell.o: ExternalShellP.h
ExternalShell.o: config.h
ExternalShell.o: extw-Xlib.h
ExternalShell.o: extw-Xt.h
ExternalShell.o: xintrinsic.h
ExternalShell.o: xintrinsicp.h
extw-Xlib-shared.o: config.h
extw-Xlib-shared.o: extw-Xlib.h
extw-Xt-shared.o: config.h
extw-Xt-shared.o: extw-Xlib.h
extw-Xt-shared.o: extw-Xt.h
extw-Xlib-nonshared.o: config.h
extw-Xlib-nonshared.o: extw-Xlib.h
extw-Xt-nonshared.o: config.h
extw-Xt-nonshared.o: extw-Xlib.h
extw-Xt-nonshared.o: extw-Xt.h
#endif

#ifdef EMACS_BTL
cadillac-btl.o: $(BTLDIR)/cadillac-btl.c
cadillac-btl.o: $(BTLDIR)/cadillac-btl.h
cadillac-btl.o: $(BTLDIR)/cadillac-btl-extern.h
cadillac-btl-asm.o: $(BTLDIR)/cadillac-btl-asm.c
cadillac-btl-asm.o: $(BTLDIR)/cadillac-btl.h
cadillac-btl-asm.o: $(BTLDIR)/cadillac-btl-extern.h
cadillac-btl-emacs.o: $(BTLDIR)/cadillac-btl-extern.h
cadillac-btl-process.o: $(BTLDIR)/cadillac-btl-process.c
cadillac-btl-process.o: $(BTLDIR)/cadillac-btl.h
cadillac-btl-process.o: $(BTLDIR)/cadillac-btl-extern.h
#endif /* EMACS_BTL */

/* (makedepend definitely misbehaves on these) */
sgiplay.o: config.h
sgiplay.o: libst.h
unexconvex.o: getpagesize.h
unexec.o: getpagesize.h
unexaix.o: config.h
unexalpha.o: config.h
unexapollo.o: config.h
unexconvex.o: config.h
unexec.o: config.h
unexelf.o: config.h
unexenix.o: config.h
unexfreebsd.o: config.h
unexhp9k3.o: config.h
unexhp9k800.o: config.h
unexmips.o: config.h
unexsunos4.o: config.h

/* Dependencies generated by 'make depend' */

#ifdef MULE
EmacsFrame.o: mule-charset.h
abbrev.o: mule-charset.h
alloc.o: mule-charset.h
buffer.o: mule-charset.h
bytecode.o: mule-charset.h
callint.o: mule-charset.h
callproc.o: mule-charset.h
callproc.o: mule-coding.h
casefiddle.o: mule-charset.h
casetab.o: mule-charset.h
chartab.o: mule-charset.h
cmdloop.o: mule-charset.h
cmds.o: mule-charset.h
console-tty.o: mule-charset.h
console-tty.o: mule-coding.h
console.o: mule-charset.h
data.o: mule-charset.h
device-tty.o: mule-charset.h
device-x.o: mule-charset.h
device.o: mule-charset.h
dialog-x.o: mule-charset.h
dired.o: mule-charset.h
doc.o: mule-charset.h
doprnt.o: mule-charset.h
editfns.o: mule-charset.h
emacs.o: mule-charset.h
eval.o: mule-charset.h
event-Xt.o: mule-charset.h
event-stream.o: mule-charset.h
event-stream.o: mule-coding.h
events.o: mule-charset.h
extents.o: mule-charset.h
faces.o: mule-charset.h
fileio.o: mule-charset.h
fileio.o: mule-coding.h
filelock.o: mule-charset.h
fns.o: mule-charset.h
font-lock.o: mule-charset.h
frame-x.o: mule-charset.h
frame.o: mule-charset.h
glyphs-x.o: mule-charset.h
glyphs.o: mule-charset.h
gui-x.o: mule-charset.h
indent.o: mule-charset.h
inline.o: mule-charset.h
inline.o: mule-coding.h
input-method-xlib.o: mule-charset.h
input-method-xlib.o: mule-coding.h
insdel.o: mule-charset.h
keymap.o: mule-charset.h
lread.o: mule-charset.h
lread.o: mule-coding.h
lstream.o: mule-charset.h
macros.o: mule-charset.h
marker.o: mule-charset.h
md5.o: mule-charset.h
menubar-x.o: mule-charset.h
minibuf.o: mule-charset.h
mocklisp.o: mule-charset.h
mule-canna.o: blocktype.h
mule-canna.o: buffer.h
mule-canna.o: bufslots.h
mule-canna.o: config.h
mule-canna.o: dynarr.h
mule-canna.o: mule-charset.h
mule-ccl.o: blocktype.h
mule-ccl.o: buffer.h
mule-ccl.o: bufslots.h
mule-ccl.o: config.h
mule-ccl.o: dynarr.h
mule-ccl.o: mule-charset.h
mule-ccl.o: mule-coding.h
mule-charset.o: blocktype.h
mule-charset.o: buffer.h
mule-charset.o: bufslots.h
mule-charset.o: chartab.h
mule-charset.o: config.h
mule-charset.o: dynarr.h
mule-charset.o: elhash.h
mule-charset.o: lstream.h
mule-charset.o: mule-charset.h
mule-coding.o: blocktype.h
mule-coding.o: buffer.h
mule-coding.o: bufslots.h
mule-coding.o: config.h
mule-coding.o: dynarr.h
mule-coding.o: elhash.h
mule-coding.o: insdel.h
mule-coding.o: lstream.h
mule-coding.o: mule-charset.h
mule-coding.o: mule-coding.h
mule-mcpath.o: blocktype.h
mule-mcpath.o: buffer.h
mule-mcpath.o: bufslots.h
mule-mcpath.o: config.h
mule-mcpath.o: dynarr.h
mule-mcpath.o: mule-charset.h
mule-mcpath.o: sysfile.h
mule-wnnfns.o: blocktype.h
mule-wnnfns.o: buffer.h
mule-wnnfns.o: bufslots.h
mule-wnnfns.o: config.h
mule-wnnfns.o: dynarr.h
mule-wnnfns.o: mule-charset.h
mule-wnnfns.o: redisplay.h
mule-wnnfns.o: scrollbar.h
mule-wnnfns.o: window.h
mule.o: blocktype.h
mule.o: config.h
mule.o: dynarr.h
mule.o: regex.h
objects-tty.o: mule-charset.h
objects-x.o: mule-charset.h
objects.o: mule-charset.h
print.o: mule-charset.h
process.o: mule-charset.h
process.o: mule-coding.h
redisplay-output.o: mule-charset.h
redisplay-tty.o: mule-charset.h
redisplay-x.o: mule-charset.h
redisplay-x.o: mule-coding.h
redisplay.o: mule-charset.h
redisplay.o: mule-coding.h
regex.o: mule-charset.h
scrollbar.o: mule-charset.h
search.o: mule-charset.h
sound.o: mule-charset.h
specifier.o: mule-charset.h
symbols.o: mule-charset.h
syntax.o: mule-charset.h
sysdep.o: mule-charset.h
toolbar-x.o: mule-charset.h
toolbar.o: mule-charset.h
tooltalk.o: mule-charset.h
undo.o: mule-charset.h
window.o: mule-charset.h
xselect.o: mule-charset.h
#endif /* MULE */

EmacsFrame.o: $(LWLIBSRCDIR)/lwlib.h
EmacsFrame.o: EmacsFrame.h
EmacsFrame.o: EmacsFrameP.h
EmacsFrame.o: EmacsManager.h
EmacsFrame.o: blocktype.h
EmacsFrame.o: buffer.h
EmacsFrame.o: bufslots.h
EmacsFrame.o: config.h
EmacsFrame.o: conslots.h
EmacsFrame.o: console-x.h
EmacsFrame.o: console.h
EmacsFrame.o: device.h
EmacsFrame.o: dynarr.h
EmacsFrame.o: faces.h
EmacsFrame.o: frame.h
EmacsFrame.o: frameslots.h
EmacsFrame.o: glyphs-x.h
EmacsFrame.o: glyphs.h
EmacsFrame.o: objects-x.h
EmacsFrame.o: objects.h
EmacsFrame.o: redisplay.h
EmacsFrame.o: scrollbar.h
EmacsFrame.o: specifier.h
EmacsFrame.o: toolbar.h
EmacsFrame.o: window.h
EmacsFrame.o: xintrinsic.h
EmacsFrame.o: xintrinsicp.h
EmacsFrame.o: xmprimitivep.h
EmacsFrame.o: xmu.h
EmacsManager.o: EmacsManager.h
EmacsManager.o: EmacsManagerP.h
EmacsManager.o: config.h
EmacsManager.o: xintrinsicp.h
EmacsManager.o: xmmanagerp.h
EmacsShell-sub.o: EmacsShell.h
EmacsShell-sub.o: EmacsShellP.h
EmacsShell-sub.o: config.h
EmacsShell-sub.o: xintrinsic.h
EmacsShell-sub.o: xintrinsicp.h
EmacsShell.o: EmacsShell.h
EmacsShell.o: config.h
EmacsShell.o: xintrinsicp.h
abbrev.o: blocktype.h
abbrev.o: buffer.h
abbrev.o: bufslots.h
abbrev.o: chartab.h
abbrev.o: commands.h
abbrev.o: config.h
abbrev.o: dynarr.h
abbrev.o: insdel.h
abbrev.o: redisplay.h
abbrev.o: scrollbar.h
abbrev.o: syntax.h
abbrev.o: window.h
alloc.o: backtrace.h
alloc.o: blocktype.h
alloc.o: buffer.h
alloc.o: bufslots.h
alloc.o: bytecode.h
alloc.o: chartab.h
alloc.o: config.h
alloc.o: conslots.h
alloc.o: console.h
alloc.o: device.h
alloc.o: dynarr.h
alloc.o: elhash.h
alloc.o: events.h
alloc.o: extents.h
alloc.o: frame.h
alloc.o: frameslots.h
alloc.o: glyphs.h
alloc.o: puresize.h puresize_adjust.h
alloc.o: redisplay.h
alloc.o: scrollbar.h
alloc.o: specifier.h
alloc.o: systime.h
alloc.o: toolbar.h
alloc.o: window.h
alloca.o: config.h
blocktype.o: blocktype.h
blocktype.o: config.h
blocktype.o: dynarr.h
buffer.o: blocktype.h
buffer.o: buffer.h
buffer.o: bufslots.h
buffer.o: chartab.h
buffer.o: commands.h
buffer.o: config.h
buffer.o: conslots.h
buffer.o: console.h
buffer.o: device.h
buffer.o: dynarr.h
buffer.o: elhash.h
buffer.o: extents.h
buffer.o: faces.h
buffer.o: frame.h
buffer.o: frameslots.h
buffer.o: insdel.h
buffer.o: process.h
buffer.o: redisplay.h
buffer.o: scrollbar.h
buffer.o: specifier.h
buffer.o: syntax.h
buffer.o: sysdep.h
buffer.o: sysfile.h
buffer.o: toolbar.h
buffer.o: window.h
bytecode.o: blocktype.h
bytecode.o: buffer.h
bytecode.o: bufslots.h
bytecode.o: chartab.h
bytecode.o: config.h
bytecode.o: dynarr.h
bytecode.o: syntax.h
callint.o: blocktype.h
callint.o: buffer.h
callint.o: bufslots.h
callint.o: bytecode.h
callint.o: commands.h
callint.o: config.h
callint.o: dynarr.h
callint.o: events.h
callint.o: insdel.h
callint.o: redisplay.h
callint.o: scrollbar.h
callint.o: systime.h
callint.o: window.h
callproc.o: blocktype.h
callproc.o: buffer.h
callproc.o: bufslots.h
callproc.o: commands.h
callproc.o: config.h
callproc.o: dynarr.h
callproc.o: insdel.h
callproc.o: lstream.h
callproc.o: paths.h
callproc.o: process.h
callproc.o: redisplay.h
callproc.o: scrollbar.h
callproc.o: sysdep.h
callproc.o: sysfile.h
callproc.o: sysproc.h
callproc.o: systime.h
callproc.o: systty.h
callproc.o: window.h
casefiddle.o: blocktype.h
casefiddle.o: buffer.h
casefiddle.o: bufslots.h
casefiddle.o: chartab.h
casefiddle.o: commands.h
casefiddle.o: config.h
casefiddle.o: dynarr.h
casefiddle.o: insdel.h
casefiddle.o: syntax.h
casetab.o: blocktype.h
casetab.o: buffer.h
casetab.o: bufslots.h
casetab.o: config.h
casetab.o: dynarr.h
casetab.o: opaque.h
chartab.o: blocktype.h
chartab.o: buffer.h
chartab.o: bufslots.h
chartab.o: chartab.h
chartab.o: commands.h
chartab.o: config.h
chartab.o: dynarr.h
chartab.o: syntax.h
cm.o: blocktype.h
cm.o: config.h
cm.o: conslots.h
cm.o: console-tty.h
cm.o: console.h
cm.o: device.h
cm.o: dynarr.h
cm.o: frame.h
cm.o: frameslots.h
cm.o: lstream.h
cm.o: redisplay.h
cm.o: scrollbar.h
cm.o: specifier.h
cm.o: systty.h
cm.o: toolbar.h
cmdloop.o: blocktype.h
cmdloop.o: buffer.h
cmdloop.o: bufslots.h
cmdloop.o: commands.h
cmdloop.o: config.h
cmdloop.o: conslots.h
cmdloop.o: console.h
cmdloop.o: device.h
cmdloop.o: dynarr.h
cmdloop.o: events.h
cmdloop.o: frame.h
cmdloop.o: frameslots.h
cmdloop.o: macros.h
cmdloop.o: redisplay.h
cmdloop.o: scrollbar.h
cmdloop.o: specifier.h
cmdloop.o: systime.h
cmdloop.o: toolbar.h
cmdloop.o: window.h
cmds.o: blocktype.h
cmds.o: buffer.h
cmds.o: bufslots.h
cmds.o: chartab.h
cmds.o: commands.h
cmds.o: config.h
cmds.o: dynarr.h
cmds.o: insdel.h
cmds.o: syntax.h
console-stream.o: blocktype.h
console-stream.o: config.h
console-stream.o: conslots.h
console-stream.o: console-stream.h
console-stream.o: console-tty.h
console-stream.o: console.h
console-stream.o: device.h
console-stream.o: dynarr.h
console-stream.o: events.h
console-stream.o: frame.h
console-stream.o: frameslots.h
console-stream.o: redisplay.h
console-stream.o: scrollbar.h
console-stream.o: specifier.h
console-stream.o: sysdep.h
console-stream.o: systime.h
console-stream.o: systty.h
console-stream.o: toolbar.h
console-stream.o: window.h
console-tty.o: blocktype.h
console-tty.o: buffer.h
console-tty.o: bufslots.h
console-tty.o: config.h
console-tty.o: conslots.h
console-tty.o: console-stream.h
console-tty.o: console-tty.h
console-tty.o: console.h
console-tty.o: device.h
console-tty.o: dynarr.h
console-tty.o: events.h
console-tty.o: faces.h
console-tty.o: frame.h
console-tty.o: frameslots.h
console-tty.o: lstream.h
console-tty.o: redisplay.h
console-tty.o: scrollbar.h
console-tty.o: specifier.h
console-tty.o: sysdep.h
console-tty.o: systime.h
console-tty.o: systty.h
console-tty.o: toolbar.h
console-x.o: blocktype.h
console-x.o: config.h
console-x.o: conslots.h
console-x.o: console-x.h
console-x.o: console.h
console-x.o: dynarr.h
console-x.o: process.h
console-x.o: redisplay.h
console-x.o: xintrinsic.h
console.o: blocktype.h
console.o: buffer.h
console.o: bufslots.h
console.o: config.h
console.o: conslots.h
console.o: console-tty.h
console.o: console.h
console.o: device.h
console.o: dynarr.h
console.o: events.h
console.o: frame.h
console.o: frameslots.h
console.o: redisplay.h
console.o: scrollbar.h
console.o: specifier.h
console.o: sysdep.h
console.o: systime.h
console.o: systty.h
console.o: toolbar.h
console.o: window.h
data.o: blocktype.h
data.o: buffer.h
data.o: bufslots.h
data.o: bytecode.h
data.o: config.h
data.o: dynarr.h
data.o: sysfloat.h
database.o: blocktype.h
database.o: config.h
database.o: database.h
database.o: dynarr.h
debug.o: blocktype.h
debug.o: bytecode.h
debug.o: config.h
debug.o: debug.h
debug.o: dynarr.h
device-tty.o: blocktype.h
device-tty.o: buffer.h
device-tty.o: bufslots.h
device-tty.o: config.h
device-tty.o: conslots.h
device-tty.o: console-stream.h
device-tty.o: console-tty.h
device-tty.o: console.h
device-tty.o: device.h
device-tty.o: dynarr.h
device-tty.o: events.h
device-tty.o: faces.h
device-tty.o: frame.h
device-tty.o: frameslots.h
device-tty.o: lstream.h
device-tty.o: redisplay.h
device-tty.o: scrollbar.h
device-tty.o: specifier.h
device-tty.o: sysdep.h
device-tty.o: systime.h
device-tty.o: systty.h
device-tty.o: toolbar.h
device-x.o: $(LWLIBSRCDIR)/lwlib.h
device-x.o: blocktype.h
device-x.o: buffer.h
device-x.o: bufslots.h
device-x.o: config.h
device-x.o: conslots.h
device-x.o: console-x.h
device-x.o: console.h
device-x.o: device.h
device-x.o: dynarr.h
device-x.o: events.h
device-x.o: faces.h
device-x.o: frame.h
device-x.o: frameslots.h
device-x.o: glyphs-x.h
device-x.o: glyphs.h
device-x.o: objects-x.h
device-x.o: objects.h
device-x.o: redisplay.h
device-x.o: scrollbar.h
device-x.o: specifier.h
device-x.o: sysdep.h
device-x.o: sysfile.h
device-x.o: systime.h
device-x.o: toolbar.h
device-x.o: window.h
device-x.o: xgccache.h
device-x.o: xintrinsic.h
device-x.o: xintrinsicp.h
device-x.o: xmu.h
device.o: blocktype.h
device.o: buffer.h
device.o: bufslots.h
device.o: config.h
device.o: conslots.h
device.o: console.h
device.o: device.h
device.o: dynarr.h
device.o: elhash.h
device.o: events.h
device.o: faces.h
device.o: frame.h
device.o: frameslots.h
device.o: keymap.h
device.o: redisplay.h
device.o: scrollbar.h
device.o: specifier.h
device.o: sysdep.h
device.o: systime.h
device.o: toolbar.h
device.o: window.h
dgif_lib.o: config.h
dgif_lib.o: gif_lib.h
dialog-x.o: $(LWLIBSRCDIR)/lwlib.h
dialog-x.o: EmacsFrame.h
dialog-x.o: EmacsManager.h
dialog-x.o: EmacsShell.h
dialog-x.o: blocktype.h
dialog-x.o: buffer.h
dialog-x.o: bufslots.h
dialog-x.o: commands.h
dialog-x.o: config.h
dialog-x.o: conslots.h
dialog-x.o: console-x.h
dialog-x.o: console.h
dialog-x.o: device.h
dialog-x.o: dynarr.h
dialog-x.o: events.h
dialog-x.o: frame.h
dialog-x.o: frameslots.h
dialog-x.o: gui-x.h
dialog-x.o: opaque.h
dialog-x.o: redisplay.h
dialog-x.o: scrollbar.h
dialog-x.o: specifier.h
dialog-x.o: systime.h
dialog-x.o: toolbar.h
dialog-x.o: window.h
dialog-x.o: xintrinsic.h
dialog.o: blocktype.h
dialog.o: config.h
dialog.o: dynarr.h
dired.o: blocktype.h
dired.o: buffer.h
dired.o: bufslots.h
dired.o: commands.h
dired.o: config.h
dired.o: dynarr.h
dired.o: elhash.h
dired.o: regex.h
dired.o: sysdir.h
dired.o: sysfile.h
doc.o: blocktype.h
doc.o: buffer.h
doc.o: bufslots.h
doc.o: bytecode.h
doc.o: config.h
doc.o: dynarr.h
doc.o: insdel.h
doc.o: keymap.h
doc.o: sysfile.h
doprnt.o: blocktype.h
doprnt.o: buffer.h
doprnt.o: bufslots.h
doprnt.o: config.h
doprnt.o: dynarr.h
doprnt.o: lstream.h
dynarr.o: blocktype.h
dynarr.o: config.h
dynarr.o: dynarr.h
ecrt0.o: config.h
editfns.o: blocktype.h
editfns.o: buffer.h
editfns.o: bufslots.h
editfns.o: commands.h
editfns.o: config.h
editfns.o: conslots.h
editfns.o: console.h
editfns.o: device.h
editfns.o: dynarr.h
editfns.o: events.h
editfns.o: extents.h
editfns.o: frame.h
editfns.o: frameslots.h
editfns.o: insdel.h
editfns.o: redisplay.h
editfns.o: scrollbar.h
editfns.o: specifier.h
editfns.o: sysdep.h
editfns.o: syspwd.h
editfns.o: systime.h
editfns.o: toolbar.h
editfns.o: window.h
elhash.o: blocktype.h
elhash.o: bytecode.h
elhash.o: config.h
elhash.o: dynarr.h
elhash.o: elhash.h
elhash.o: hash.h
emacs.o: backtrace.h
emacs.o: blocktype.h
emacs.o: buffer.h
emacs.o: bufslots.h
emacs.o: commands.h
emacs.o: config.h
emacs.o: conslots.h
emacs.o: console.h
emacs.o: dynarr.h
emacs.o: process.h
emacs.o: sysdep.h
emacs.o: sysfile.h
emacs.o: systime.h
emacs.o: systty.h
emacs.o: xemacs-version.h
energize.o: config.h
eval.o: backtrace.h
eval.o: blocktype.h
eval.o: buffer.h
eval.o: bufslots.h
eval.o: bytecode.h
eval.o: commands.h
eval.o: config.h
eval.o: conslots.h
eval.o: console.h
eval.o: dynarr.h
eval.o: opaque.h
event-Xt.o: $(LWLIBSRCDIR)/lwlib.h
event-Xt.o: Emacs.ad.h
event-Xt.o: EmacsFrame.h
event-Xt.o: blocktype.h
event-Xt.o: buffer.h
event-Xt.o: bufslots.h
event-Xt.o: commands.h
event-Xt.o: config.h
event-Xt.o: conslots.h
event-Xt.o: console-tty.h
event-Xt.o: console-x.h
event-Xt.o: console.h
event-Xt.o: device.h
event-Xt.o: dynarr.h
event-Xt.o: events.h
event-Xt.o: frame.h
event-Xt.o: frameslots.h
event-Xt.o: objects-x.h
event-Xt.o: objects.h
event-Xt.o: paths.h
event-Xt.o: process.h
event-Xt.o: redisplay.h
event-Xt.o: scrollbar.h
event-Xt.o: specifier.h
event-Xt.o: sysproc.h
event-Xt.o: systime.h
event-Xt.o: systty.h
event-Xt.o: toolbar.h
event-Xt.o: xintrinsic.h
event-Xt.o: xintrinsicp.h
event-stream.o: blocktype.h
event-stream.o: buffer.h
event-stream.o: bufslots.h
event-stream.o: commands.h
event-stream.o: config.h
event-stream.o: conslots.h
event-stream.o: console.h
event-stream.o: device.h
event-stream.o: dynarr.h
event-stream.o: elhash.h
event-stream.o: events.h
event-stream.o: frame.h
event-stream.o: frameslots.h
event-stream.o: insdel.h
event-stream.o: keymap.h
event-stream.o: lstream.h
event-stream.o: macros.h
event-stream.o: opaque.h
event-stream.o: process.h
event-stream.o: redisplay.h
event-stream.o: scrollbar.h
event-stream.o: specifier.h
event-stream.o: sysdep.h
event-stream.o: systime.h
event-stream.o: toolbar.h
event-stream.o: window.h
event-tty.o: blocktype.h
event-tty.o: config.h
event-tty.o: conslots.h
event-tty.o: console-tty.h
event-tty.o: console.h
event-tty.o: device.h
event-tty.o: dynarr.h
event-tty.o: events.h
event-tty.o: frame.h
event-tty.o: frameslots.h
event-tty.o: paths.h
event-tty.o: process.h
event-tty.o: scrollbar.h
event-tty.o: specifier.h
event-tty.o: sysproc.h
event-tty.o: systime.h
event-tty.o: systty.h
event-tty.o: syswait.h
event-tty.o: toolbar.h
event-unixoid.o: blocktype.h
event-unixoid.o: config.h
event-unixoid.o: conslots.h
event-unixoid.o: console-stream.h
event-unixoid.o: console-tty.h
event-unixoid.o: console.h
event-unixoid.o: device.h
event-unixoid.o: dynarr.h
event-unixoid.o: events.h
event-unixoid.o: paths.h
event-unixoid.o: process.h
event-unixoid.o: sysdep.h
event-unixoid.o: sysproc.h
event-unixoid.o: systime.h
event-unixoid.o: systty.h
events.o: blocktype.h
events.o: buffer.h
events.o: bufslots.h
events.o: config.h
events.o: conslots.h
events.o: console-tty.h
events.o: console-x.h
events.o: console.h
events.o: device.h
events.o: dynarr.h
events.o: events.h
events.o: extents.h
events.o: frame.h
events.o: frameslots.h
events.o: glyphs.h
events.o: keymap.h
events.o: redisplay.h
events.o: scrollbar.h
events.o: specifier.h
events.o: systime.h
events.o: systty.h
events.o: toolbar.h
events.o: window.h
events.o: xintrinsic.h
extents.o: blocktype.h
extents.o: buffer.h
extents.o: bufslots.h
extents.o: config.h
extents.o: conslots.h
extents.o: console.h
extents.o: debug.h
extents.o: device.h
extents.o: dynarr.h
extents.o: elhash.h
extents.o: extents.h
extents.o: faces.h
extents.o: frame.h
extents.o: frameslots.h
extents.o: glyphs.h
extents.o: hash.h
extents.o: insdel.h
extents.o: opaque.h
extents.o: process.h
extents.o: redisplay.h
extents.o: scrollbar.h
extents.o: specifier.h
extents.o: toolbar.h
faces.o: EmacsFrame.h
faces.o: blocktype.h
faces.o: buffer.h
faces.o: bufslots.h
faces.o: config.h
faces.o: conslots.h
faces.o: console-x.h
faces.o: console.h
faces.o: device.h
faces.o: dynarr.h
faces.o: elhash.h
faces.o: extents.h
faces.o: faces.h
faces.o: frame.h
faces.o: frameslots.h
faces.o: glyphs.h
faces.o: hash.h
faces.o: objects-x.h
faces.o: objects.h
faces.o: redisplay.h
faces.o: scrollbar.h
faces.o: specifier.h
faces.o: toolbar.h
faces.o: window.h
faces.o: xintrinsic.h
fileio.o: blocktype.h
fileio.o: buffer.h
fileio.o: bufslots.h
fileio.o: config.h
fileio.o: conslots.h
fileio.o: console.h
fileio.o: device.h
fileio.o: dynarr.h
fileio.o: events.h
fileio.o: frame.h
fileio.o: frameslots.h
fileio.o: insdel.h
fileio.o: lstream.h
fileio.o: paths.h
fileio.o: redisplay.h
fileio.o: scrollbar.h
fileio.o: specifier.h
fileio.o: sysdep.h
fileio.o: sysdir.h
fileio.o: sysfile.h
fileio.o: sysproc.h
fileio.o: syspwd.h
fileio.o: systime.h
fileio.o: toolbar.h
fileio.o: window.h
filelock.o: blocktype.h
filelock.o: buffer.h
filelock.o: bufslots.h
filelock.o: config.h
filelock.o: dynarr.h
filelock.o: paths.h
filelock.o: sysdir.h
filelock.o: sysfile.h
filelock.o: syspwd.h
filemode.o: blocktype.h
filemode.o: config.h
filemode.o: dynarr.h
filemode.o: sysfile.h
floatfns.o: blocktype.h
floatfns.o: config.h
floatfns.o: dynarr.h
floatfns.o: sysfloat.h
fns.o: blocktype.h
fns.o: buffer.h
fns.o: bufslots.h
fns.o: bytecode.h
fns.o: commands.h
fns.o: config.h
fns.o: conslots.h
fns.o: console.h
fns.o: device.h
fns.o: dynarr.h
fns.o: events.h
fns.o: extents.h
fns.o: frame.h
fns.o: frameslots.h
fns.o: scrollbar.h
fns.o: specifier.h
fns.o: systime.h
fns.o: toolbar.h
font-lock.o: blocktype.h
font-lock.o: buffer.h
font-lock.o: bufslots.h
font-lock.o: chartab.h
font-lock.o: config.h
font-lock.o: dynarr.h
font-lock.o: insdel.h
font-lock.o: syntax.h
frame-tty.o: blocktype.h
frame-tty.o: config.h
frame-tty.o: conslots.h
frame-tty.o: console-tty.h
frame-tty.o: console.h
frame-tty.o: device.h
frame-tty.o: dynarr.h
frame-tty.o: frame.h
frame-tty.o: frameslots.h
frame-tty.o: scrollbar.h
frame-tty.o: specifier.h
frame-tty.o: systty.h
frame-tty.o: toolbar.h
frame-x.o: $(LWLIBSRCDIR)/lwlib.h
frame-x.o: EmacsFrame.h
frame-x.o: EmacsFrameP.h
frame-x.o: EmacsManager.h
frame-x.o: EmacsShell.h
frame-x.o: ExternalShell.h
frame-x.o: blocktype.h
frame-x.o: buffer.h
frame-x.o: bufslots.h
frame-x.o: config.h
frame-x.o: conslots.h
frame-x.o: console-x.h
frame-x.o: console.h
frame-x.o: device.h
frame-x.o: dynarr.h
frame-x.o: events.h
frame-x.o: extents.h
frame-x.o: faces.h
frame-x.o: frame.h
frame-x.o: frameslots.h
frame-x.o: glyphs-x.h
frame-x.o: glyphs.h
frame-x.o: objects-x.h
frame-x.o: objects.h
frame-x.o: redisplay.h
frame-x.o: scrollbar-x.h
frame-x.o: scrollbar.h
frame-x.o: specifier.h
frame-x.o: systime.h
frame-x.o: toolbar.h
frame-x.o: window.h
frame-x.o: xintrinsic.h
frame-x.o: xintrinsicp.h
frame-x.o: xmprimitivep.h
frame-x.o: xmu.h
frame.o: blocktype.h
frame.o: buffer.h
frame.o: bufslots.h
frame.o: config.h
frame.o: conslots.h
frame.o: console.h
frame.o: device.h
frame.o: dynarr.h
frame.o: events.h
frame.o: extents.h
frame.o: faces.h
frame.o: frame.h
frame.o: frameslots.h
frame.o: glyphs.h
frame.o: menubar.h
frame.o: redisplay.h
frame.o: scrollbar.h
frame.o: specifier.h
frame.o: sysdep.h
frame.o: systime.h
frame.o: toolbar.h
frame.o: window.h
free-hook.o: blocktype.h
free-hook.o: config.h
free-hook.o: dynarr.h
free-hook.o: hash.h
general.o: blocktype.h
general.o: config.h
general.o: dynarr.h
getloadavg.o: blocktype.h
getloadavg.o: config.h
getloadavg.o: dynarr.h
gif_err.o: config.h
gif_err.o: gif_lib.h
gifalloc.o: config.h
gifalloc.o: gif_lib.h
glyphs-x.o: $(LWLIBSRCDIR)/lwlib.h
glyphs-x.o: ${srcdir}/${etcdir}xemacs.xbm
glyphs-x.o: bitmaps.h
glyphs-x.o: blocktype.h
glyphs-x.o: buffer.h
glyphs-x.o: bufslots.h
glyphs-x.o: config.h
glyphs-x.o: conslots.h
glyphs-x.o: console-x.h
glyphs-x.o: console.h
glyphs-x.o: device.h
glyphs-x.o: dynarr.h
glyphs-x.o: frame.h
glyphs-x.o: frameslots.h
glyphs-x.o: gif_lib.h
glyphs-x.o: glyphs-x.h
glyphs-x.o: glyphs.h
glyphs-x.o: insdel.h
glyphs-x.o: objects-x.h
glyphs-x.o: objects.h
glyphs-x.o: opaque.h
glyphs-x.o: scrollbar.h
glyphs-x.o: specifier.h
glyphs-x.o: sysfile.h
glyphs-x.o: toolbar.h
glyphs-x.o: xintrinsic.h
glyphs-x.o: xmu.h
glyphs.o: blocktype.h
glyphs.o: buffer.h
glyphs.o: bufslots.h
glyphs.o: config.h
glyphs.o: conslots.h
glyphs.o: console.h
glyphs.o: device.h
glyphs.o: dynarr.h
glyphs.o: elhash.h
glyphs.o: faces.h
glyphs.o: frame.h
glyphs.o: frameslots.h
glyphs.o: glyphs.h
glyphs.o: objects.h
glyphs.o: redisplay.h
glyphs.o: scrollbar.h
glyphs.o: specifier.h
glyphs.o: toolbar.h
glyphs.o: window.h
gmalloc.o: config.h
gmalloc.o: getpagesize.h
gui-x.o: $(LWLIBSRCDIR)/lwlib.h
gui-x.o: blocktype.h
gui-x.o: buffer.h
gui-x.o: bufslots.h
gui-x.o: config.h
gui-x.o: conslots.h
gui-x.o: console-x.h
gui-x.o: console.h
gui-x.o: device.h
gui-x.o: dynarr.h
gui-x.o: frame.h
gui-x.o: frameslots.h
gui-x.o: gui-x.h
gui-x.o: opaque.h
gui-x.o: scrollbar.h
gui-x.o: specifier.h
gui-x.o: toolbar.h
gui-x.o: xintrinsic.h
gui.o: blocktype.h
gui.o: config.h
gui.o: dynarr.h
hash.o: blocktype.h
hash.o: config.h
hash.o: dynarr.h
hash.o: elhash.h
hash.o: hash.h
hftctl.o: blocktype.h
hftctl.o: config.h
hftctl.o: dynarr.h
hpplay.o: blocktype.h
hpplay.o: config.h
hpplay.o: dynarr.h
indent.o: blocktype.h
indent.o: buffer.h
indent.o: bufslots.h
indent.o: config.h
indent.o: conslots.h
indent.o: console.h
indent.o: device.h
indent.o: dynarr.h
indent.o: extents.h
indent.o: faces.h
indent.o: frame.h
indent.o: frameslots.h
indent.o: glyphs.h
indent.o: insdel.h
indent.o: redisplay.h
indent.o: scrollbar.h
indent.o: specifier.h
indent.o: toolbar.h
indent.o: window.h
inline.o: $(LWLIBSRCDIR)/lwlib.h
inline.o: blocktype.h
inline.o: buffer.h
inline.o: bufslots.h
inline.o: bytecode.h
inline.o: chartab.h
inline.o: config.h
inline.o: conslots.h
inline.o: console-x.h
inline.o: console.h
inline.o: device.h
inline.o: dynarr.h
inline.o: elhash.h
inline.o: events.h
inline.o: extents.h
inline.o: faces.h
inline.o: frame.h
inline.o: frameslots.h
inline.o: glyphs-x.h
inline.o: glyphs.h
inline.o: gui-x.h
inline.o: keymap.h
inline.o: lstream.h
inline.o: objects.h
inline.o: opaque.h
inline.o: process.h
inline.o: redisplay.h
inline.o: scrollbar.h
inline.o: specifier.h
inline.o: syntax.h
inline.o: systime.h
inline.o: toolbar.h
inline.o: window.h
inline.o: xintrinsic.h
input-method-xlib.o: EmacsFrame.h
input-method-xlib.o: blocktype.h
input-method-xlib.o: buffer.h
input-method-xlib.o: bufslots.h
input-method-xlib.o: config.h
input-method-xlib.o: conslots.h
input-method-xlib.o: console-x.h
input-method-xlib.o: console.h
input-method-xlib.o: device.h
input-method-xlib.o: dynarr.h
input-method-xlib.o: frame.h
input-method-xlib.o: frameslots.h
input-method-xlib.o: insdel.h
input-method-xlib.o: lstream.h
input-method-xlib.o: redisplay.h
input-method-xlib.o: scrollbar.h
input-method-xlib.o: specifier.h
input-method-xlib.o: toolbar.h
input-method-xlib.o: window.h
input-method-xlib.o: xintrinsic.h
insdel.o: blocktype.h
insdel.o: buffer.h
insdel.o: bufslots.h
insdel.o: config.h
insdel.o: conslots.h
insdel.o: console.h
insdel.o: device.h
insdel.o: dynarr.h
insdel.o: extents.h
insdel.o: frame.h
insdel.o: frameslots.h
insdel.o: insdel.h
insdel.o: lstream.h
insdel.o: redisplay.h
insdel.o: scrollbar.h
insdel.o: specifier.h
insdel.o: toolbar.h
intl.o: blocktype.h
intl.o: bytecode.h
intl.o: config.h
intl.o: conslots.h
intl.o: console.h
intl.o: device.h
intl.o: dynarr.h
keymap.o: blocktype.h
keymap.o: buffer.h
keymap.o: bufslots.h
keymap.o: bytecode.h
keymap.o: commands.h
keymap.o: config.h
keymap.o: conslots.h
keymap.o: console.h
keymap.o: device.h
keymap.o: dynarr.h
keymap.o: elhash.h
keymap.o: events.h
keymap.o: frame.h
keymap.o: frameslots.h
keymap.o: insdel.h
keymap.o: keymap.h
keymap.o: redisplay.h
keymap.o: scrollbar.h
keymap.o: specifier.h
keymap.o: systime.h
keymap.o: toolbar.h
keymap.o: window.h
libsst.o: blocktype.h
libsst.o: config.h
libsst.o: dynarr.h
libsst.o: libsst.h
linuxplay.o: blocktype.h
linuxplay.o: config.h
linuxplay.o: dynarr.h
lread.o: blocktype.h
lread.o: buffer.h
lread.o: bufslots.h
lread.o: bytecode.h
lread.o: commands.h
lread.o: config.h
lread.o: dynarr.h
lread.o: insdel.h
lread.o: lstream.h
lread.o: opaque.h
lread.o: paths.h
lread.o: sysfile.h
lstream.o: blocktype.h
lstream.o: buffer.h
lstream.o: bufslots.h
lstream.o: config.h
lstream.o: dynarr.h
lstream.o: insdel.h
lstream.o: lstream.h
lstream.o: sysfile.h
macros.o: blocktype.h
macros.o: buffer.h
macros.o: bufslots.h
macros.o: commands.h
macros.o: config.h
macros.o: conslots.h
macros.o: console.h
macros.o: device.h
macros.o: dynarr.h
macros.o: events.h
macros.o: frame.h
macros.o: frameslots.h
macros.o: keymap.h
macros.o: macros.h
macros.o: redisplay.h
macros.o: scrollbar.h
macros.o: specifier.h
macros.o: systime.h
macros.o: toolbar.h
macros.o: window.h
malloc.o: config.h
malloc.o: getpagesize.h
marker.o: blocktype.h
marker.o: buffer.h
marker.o: bufslots.h
marker.o: config.h
marker.o: dynarr.h
md5.o: blocktype.h
md5.o: buffer.h
md5.o: bufslots.h
md5.o: config.h
md5.o: dynarr.h
md5.o: insdel.h
menubar-x.o: $(LWLIBSRCDIR)/lwlib.h
menubar-x.o: EmacsFrame.h
menubar-x.o: EmacsManager.h
menubar-x.o: EmacsShell.h
menubar-x.o: blocktype.h
menubar-x.o: buffer.h
menubar-x.o: bufslots.h
menubar-x.o: commands.h
menubar-x.o: config.h
menubar-x.o: conslots.h
menubar-x.o: console-x.h
menubar-x.o: console.h
menubar-x.o: device.h
menubar-x.o: dynarr.h
menubar-x.o: events.h
menubar-x.o: frame.h
menubar-x.o: frameslots.h
menubar-x.o: gui-x.h
menubar-x.o: opaque.h
menubar-x.o: redisplay.h
menubar-x.o: scrollbar.h
menubar-x.o: specifier.h
menubar-x.o: systime.h
menubar-x.o: toolbar.h
menubar-x.o: window.h
menubar-x.o: xintrinsic.h
menubar.o: blocktype.h
menubar.o: config.h
menubar.o: conslots.h
menubar.o: console.h
menubar.o: device.h
menubar.o: dynarr.h
menubar.o: frame.h
menubar.o: frameslots.h
menubar.o: menubar.h
menubar.o: redisplay.h
menubar.o: scrollbar.h
menubar.o: specifier.h
menubar.o: toolbar.h
menubar.o: window.h
minibuf.o: blocktype.h
minibuf.o: buffer.h
minibuf.o: bufslots.h
minibuf.o: commands.h
minibuf.o: config.h
minibuf.o: conslots.h
minibuf.o: console-stream.h
minibuf.o: console.h
minibuf.o: device.h
minibuf.o: dynarr.h
minibuf.o: events.h
minibuf.o: frame.h
minibuf.o: frameslots.h
minibuf.o: insdel.h
minibuf.o: redisplay.h
minibuf.o: scrollbar.h
minibuf.o: specifier.h
minibuf.o: systime.h
minibuf.o: toolbar.h
minibuf.o: window.h
mocklisp.o: blocktype.h
mocklisp.o: buffer.h
mocklisp.o: bufslots.h
mocklisp.o: config.h
mocklisp.o: dynarr.h
msdos.o: config.h
nas.o: blocktype.h
nas.o: config.h
nas.o: dynarr.h
objects-tty.o: blocktype.h
objects-tty.o: config.h
objects-tty.o: conslots.h
objects-tty.o: console-tty.h
objects-tty.o: console.h
objects-tty.o: device.h
objects-tty.o: dynarr.h
objects-tty.o: insdel.h
objects-tty.o: objects-tty.h
objects-tty.o: objects.h
objects-tty.o: specifier.h
objects-tty.o: systty.h
objects-x.o: blocktype.h
objects-x.o: buffer.h
objects-x.o: bufslots.h
objects-x.o: config.h
objects-x.o: conslots.h
objects-x.o: console-x.h
objects-x.o: console.h
objects-x.o: device.h
objects-x.o: dynarr.h
objects-x.o: insdel.h
objects-x.o: objects-x.h
objects-x.o: objects.h
objects-x.o: specifier.h
objects-x.o: xintrinsic.h
objects.o: blocktype.h
objects.o: buffer.h
objects.o: bufslots.h
objects.o: config.h
objects.o: conslots.h
objects.o: console.h
objects.o: device.h
objects.o: dynarr.h
objects.o: elhash.h
objects.o: faces.h
objects.o: frame.h
objects.o: frameslots.h
objects.o: objects.h
objects.o: redisplay.h
objects.o: scrollbar.h
objects.o: specifier.h
objects.o: toolbar.h
objects.o: window.h
opaque.o: blocktype.h
opaque.o: config.h
opaque.o: dynarr.h
opaque.o: opaque.h
print.o: backtrace.h
print.o: blocktype.h
print.o: buffer.h
print.o: bufslots.h
print.o: bytecode.h
print.o: config.h
print.o: conslots.h
print.o: console-stream.h
print.o: console-tty.h
print.o: console.h
print.o: device.h
print.o: dynarr.h
print.o: extents.h
print.o: frame.h
print.o: frameslots.h
print.o: insdel.h
print.o: lstream.h
print.o: scrollbar.h
print.o: specifier.h
print.o: systty.h
print.o: toolbar.h
process.o: blocktype.h
process.o: buffer.h
process.o: bufslots.h
process.o: commands.h
process.o: config.h
process.o: conslots.h
process.o: console.h
process.o: device.h
process.o: dynarr.h
process.o: events.h
process.o: frame.h
process.o: frameslots.h
process.o: insdel.h
process.o: lstream.h
process.o: opaque.h
process.o: paths.h
process.o: process.h
process.o: redisplay.h
process.o: scrollbar.h
process.o: specifier.h
process.o: sysdep.h
process.o: sysfile.h
process.o: sysproc.h
process.o: systime.h
process.o: systty.h
process.o: syswait.h
process.o: toolbar.h
process.o: window.h
profile.o: backtrace.h
profile.o: blocktype.h
profile.o: bytecode.h
profile.o: config.h
profile.o: dynarr.h
profile.o: hash.h
profile.o: systime.h
pure.o: blocktype.h
pure.o: config.h
pure.o: dynarr.h
pure.o: puresize.h puresize_adjust.h
ralloc.o: blocktype.h
ralloc.o: config.h
ralloc.o: dynarr.h
ralloc.o: getpagesize.h
rangetab.o: blocktype.h
rangetab.o: config.h
rangetab.o: dynarr.h
realpath.o: config.h
redisplay-output.o: blocktype.h
redisplay-output.o: buffer.h
redisplay-output.o: bufslots.h
redisplay-output.o: config.h
redisplay-output.o: conslots.h
redisplay-output.o: console.h
redisplay-output.o: debug.h
redisplay-output.o: device.h
redisplay-output.o: dynarr.h
redisplay-output.o: faces.h
redisplay-output.o: frame.h
redisplay-output.o: frameslots.h
redisplay-output.o: glyphs.h
redisplay-output.o: redisplay.h
redisplay-output.o: scrollbar.h
redisplay-output.o: specifier.h
redisplay-output.o: sysdep.h
redisplay-output.o: toolbar.h
redisplay-output.o: window.h
redisplay-tty.o: blocktype.h
redisplay-tty.o: buffer.h
redisplay-tty.o: bufslots.h
redisplay-tty.o: config.h
redisplay-tty.o: conslots.h
redisplay-tty.o: console-tty.h
redisplay-tty.o: console.h
redisplay-tty.o: device.h
redisplay-tty.o: dynarr.h
redisplay-tty.o: events.h
redisplay-tty.o: faces.h
redisplay-tty.o: frame.h
redisplay-tty.o: frameslots.h
redisplay-tty.o: glyphs.h
redisplay-tty.o: lstream.h
redisplay-tty.o: objects-tty.h
redisplay-tty.o: objects.h
redisplay-tty.o: redisplay.h
redisplay-tty.o: scrollbar.h
redisplay-tty.o: specifier.h
redisplay-tty.o: sysdep.h
redisplay-tty.o: systime.h
redisplay-tty.o: systty.h
redisplay-tty.o: toolbar.h
redisplay-tty.o: window.h
redisplay-x.o: $(LWLIBSRCDIR)/lwlib.h
redisplay-x.o: EmacsFrame.h
redisplay-x.o: EmacsFrameP.h
redisplay-x.o: blocktype.h
redisplay-x.o: buffer.h
redisplay-x.o: bufslots.h
redisplay-x.o: config.h
redisplay-x.o: conslots.h
redisplay-x.o: console-x.h
redisplay-x.o: console.h
redisplay-x.o: debug.h
redisplay-x.o: device.h
redisplay-x.o: dynarr.h
redisplay-x.o: faces.h
redisplay-x.o: frame.h
redisplay-x.o: frameslots.h
redisplay-x.o: glyphs-x.h
redisplay-x.o: glyphs.h
redisplay-x.o: objects-x.h
redisplay-x.o: objects.h
redisplay-x.o: paths.h
redisplay-x.o: redisplay.h
redisplay-x.o: scrollbar.h
redisplay-x.o: specifier.h
redisplay-x.o: sysdep.h
redisplay-x.o: sysproc.h
redisplay-x.o: systime.h
redisplay-x.o: toolbar.h
redisplay-x.o: window.h
redisplay-x.o: xgccache.h
redisplay-x.o: xintrinsic.h
redisplay-x.o: xintrinsicp.h
redisplay-x.o: xmprimitivep.h
redisplay.o: blocktype.h
redisplay.o: buffer.h
redisplay.o: bufslots.h
redisplay.o: commands.h
redisplay.o: config.h
redisplay.o: conslots.h
redisplay.o: console.h
redisplay.o: debug.h
redisplay.o: device.h
redisplay.o: dynarr.h
redisplay.o: extents.h
redisplay.o: faces.h
redisplay.o: frame.h
redisplay.o: frameslots.h
redisplay.o: glyphs.h
redisplay.o: insdel.h
redisplay.o: menubar.h
redisplay.o: objects.h
redisplay.o: process.h
redisplay.o: redisplay.h
redisplay.o: scrollbar.h
redisplay.o: specifier.h
redisplay.o: toolbar.h
redisplay.o: window.h
regex.o: blocktype.h
regex.o: buffer.h
regex.o: bufslots.h
regex.o: chartab.h
regex.o: config.h
regex.o: dynarr.h
regex.o: regex.h
regex.o: syntax.h
scrollbar-x.o: $(LWLIBSRCDIR)/lwlib.h
scrollbar-x.o: EmacsFrame.h
scrollbar-x.o: EmacsManager.h
scrollbar-x.o: blocktype.h
scrollbar-x.o: config.h
scrollbar-x.o: conslots.h
scrollbar-x.o: console-x.h
scrollbar-x.o: console.h
scrollbar-x.o: device.h
scrollbar-x.o: dynarr.h
scrollbar-x.o: frame.h
scrollbar-x.o: frameslots.h
scrollbar-x.o: glyphs-x.h
scrollbar-x.o: glyphs.h
scrollbar-x.o: gui-x.h
scrollbar-x.o: redisplay.h
scrollbar-x.o: scrollbar-x.h
scrollbar-x.o: scrollbar.h
scrollbar-x.o: specifier.h
scrollbar-x.o: toolbar.h
scrollbar-x.o: window.h
scrollbar-x.o: xintrinsic.h
scrollbar.o: blocktype.h
scrollbar.o: buffer.h
scrollbar.o: bufslots.h
scrollbar.o: commands.h
scrollbar.o: config.h
scrollbar.o: conslots.h
scrollbar.o: console.h
scrollbar.o: device.h
scrollbar.o: dynarr.h
scrollbar.o: frame.h
scrollbar.o: frameslots.h
scrollbar.o: glyphs.h
scrollbar.o: redisplay.h
scrollbar.o: scrollbar.h
scrollbar.o: specifier.h
scrollbar.o: toolbar.h
scrollbar.o: window.h
search.o: blocktype.h
search.o: buffer.h
search.o: bufslots.h
search.o: chartab.h
search.o: commands.h
search.o: config.h
search.o: dynarr.h
search.o: insdel.h
search.o: opaque.h
search.o: regex.h
search.o: syntax.h
signal.o: blocktype.h
signal.o: config.h
signal.o: conslots.h
signal.o: console.h
signal.o: device.h
signal.o: dynarr.h
signal.o: events.h
signal.o: frame.h
signal.o: frameslots.h
signal.o: scrollbar.h
signal.o: specifier.h
signal.o: sysdep.h
signal.o: systime.h
signal.o: toolbar.h
sound.o: blocktype.h
sound.o: buffer.h
sound.o: bufslots.h
sound.o: commands.h
sound.o: config.h
sound.o: conslots.h
sound.o: console-x.h
sound.o: console.h
sound.o: device.h
sound.o: dynarr.h
sound.o: redisplay.h
sound.o: sysdep.h
sound.o: xintrinsic.h
specifier.o: blocktype.h
specifier.o: buffer.h
specifier.o: bufslots.h
specifier.o: config.h
specifier.o: conslots.h
specifier.o: console.h
specifier.o: device.h
specifier.o: dynarr.h
specifier.o: frame.h
specifier.o: frameslots.h
specifier.o: opaque.h
specifier.o: redisplay.h
specifier.o: scrollbar.h
specifier.o: specifier.h
specifier.o: toolbar.h
specifier.o: window.h
strftime.o: blocktype.h
strftime.o: config.h
strftime.o: dynarr.h
sunOS-fix.o: config.h
sunplay.o: blocktype.h
sunplay.o: config.h
sunplay.o: dynarr.h
sunplay.o: sysdep.h
sunpro.o: blocktype.h
sunpro.o: config.h
sunpro.o: dynarr.h
symbols.o: blocktype.h
symbols.o: buffer.h
symbols.o: bufslots.h
symbols.o: config.h
symbols.o: conslots.h
symbols.o: console.h
symbols.o: dynarr.h
syntax.o: blocktype.h
syntax.o: buffer.h
syntax.o: bufslots.h
syntax.o: chartab.h
syntax.o: commands.h
syntax.o: config.h
syntax.o: dynarr.h
syntax.o: insdel.h
syntax.o: syntax.h
sysdep.o: blocktype.h
sysdep.o: buffer.h
sysdep.o: bufslots.h
sysdep.o: config.h
sysdep.o: conslots.h
sysdep.o: console-stream.h
sysdep.o: console-x.h
sysdep.o: console.h
sysdep.o: device.h
sysdep.o: dynarr.h
sysdep.o: events.h
sysdep.o: frame.h
sysdep.o: frameslots.h
sysdep.o: process.h
sysdep.o: redisplay.h
sysdep.o: scrollbar.h
sysdep.o: specifier.h
sysdep.o: sysdep.h
sysdep.o: sysdir.h
sysdep.o: sysfile.h
sysdep.o: systime.h
sysdep.o: syswait.h
sysdep.o: toolbar.h
sysdep.o: window.h
sysdep.o: xintrinsic.h
termcap.o: blocktype.h
termcap.o: config.h
termcap.o: conslots.h
termcap.o: console.h
termcap.o: device.h
termcap.o: dynarr.h
terminfo.o: config.h
toolbar-x.o: $(LWLIBSRCDIR)/lwlib.h
toolbar-x.o: EmacsFrame.h
toolbar-x.o: EmacsFrameP.h
toolbar-x.o: EmacsManager.h
toolbar-x.o: blocktype.h
toolbar-x.o: buffer.h
toolbar-x.o: bufslots.h
toolbar-x.o: config.h
toolbar-x.o: conslots.h
toolbar-x.o: console-x.h
toolbar-x.o: console.h
toolbar-x.o: device.h
toolbar-x.o: dynarr.h
toolbar-x.o: faces.h
toolbar-x.o: frame.h
toolbar-x.o: frameslots.h
toolbar-x.o: glyphs-x.h
toolbar-x.o: glyphs.h
toolbar-x.o: objects-x.h
toolbar-x.o: objects.h
toolbar-x.o: redisplay.h
toolbar-x.o: scrollbar.h
toolbar-x.o: specifier.h
toolbar-x.o: toolbar.h
toolbar-x.o: window.h
toolbar-x.o: xgccache.h
toolbar-x.o: xintrinsic.h
toolbar-x.o: xintrinsicp.h
toolbar-x.o: xmprimitivep.h
toolbar.o: blocktype.h
toolbar.o: buffer.h
toolbar.o: bufslots.h
toolbar.o: config.h
toolbar.o: conslots.h
toolbar.o: console.h
toolbar.o: device.h
toolbar.o: dynarr.h
toolbar.o: frame.h
toolbar.o: frameslots.h
toolbar.o: glyphs.h
toolbar.o: redisplay.h
toolbar.o: scrollbar.h
toolbar.o: specifier.h
toolbar.o: toolbar.h
toolbar.o: window.h
tooltalk.o: blocktype.h
tooltalk.o: buffer.h
tooltalk.o: bufslots.h
tooltalk.o: config.h
tooltalk.o: dynarr.h
tooltalk.o: elhash.h
tooltalk.o: process.h
tooltalk.o: tooltalk.h
tparam.o: config.h
undo.o: blocktype.h
undo.o: buffer.h
undo.o: bufslots.h
undo.o: config.h
undo.o: dynarr.h
undo.o: extents.h
vm-limit.o: blocktype.h
vm-limit.o: config.h
vm-limit.o: dynarr.h
vm-limit.o: mem-limits.h
window.o: blocktype.h
window.o: buffer.h
window.o: bufslots.h
window.o: commands.h
window.o: config.h
window.o: conslots.h
window.o: console.h
window.o: device.h
window.o: dynarr.h
window.o: faces.h
window.o: frame.h
window.o: frameslots.h
window.o: glyphs.h
window.o: objects.h
window.o: redisplay.h
window.o: scrollbar.h
window.o: specifier.h
window.o: toolbar.h
window.o: window.h
xgccache.o: blocktype.h
xgccache.o: config.h
xgccache.o: dynarr.h
xgccache.o: hash.h
xgccache.o: xgccache.h
xmu.o: config.h
xselect.o: blocktype.h
xselect.o: buffer.h
xselect.o: bufslots.h
xselect.o: config.h
xselect.o: conslots.h
xselect.o: console-x.h
xselect.o: console.h
xselect.o: device.h
xselect.o: dynarr.h
xselect.o: frame.h
xselect.o: frameslots.h
xselect.o: objects-x.h
xselect.o: objects.h
xselect.o: opaque.h
xselect.o: scrollbar.h
xselect.o: specifier.h
xselect.o: systime.h
xselect.o: toolbar.h
xselect.o: xintrinsic.h
